{"version":3,"file":"component---src-templates-blog-template-js-16fdcf5baa2d982afa1c.js","mappings":"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","sources":["webpack://zoomkoding.com/./src/models/post.js","webpack://zoomkoding.com/./src/components/post-header/index.js","webpack://zoomkoding.com/./src/components/post-navigator/index.js","webpack://zoomkoding.com/./src/components/post-content/index.js","webpack://zoomkoding.com/./src/components/utterances/index.js","webpack://zoomkoding.com/./src/templates/blog-template.js"],"sourcesContent":["export default class Post {\n  constructor(node) {\n    const { id, html, excerpt, frontmatter, fields } = node;\n    const { slug } = fields;\n    const { categories, title, author, date } = frontmatter;\n\n    this.id = id;\n    this.excerpt = excerpt;\n    this.html = html;\n    this.slug = slug;\n    this.title = title;\n    this.author = author;\n    this.date = date;\n    this.categories = categories.split(' ');\n  }\n}\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport './style.scss';\n\nfunction PostHeader({ post, viewCount }) {\n  return (\n    <header className=\"post-header\">\n      <h1 className=\"title\">{post.title}</h1>\n      <div className=\"info\">\n        {post.date} |\n        <div className=\"categories\">\n          {post.categories.map((category) => (\n            <Link className=\"category\" key={category} to={`/posts/${category}`}>\n              {category}\n            </Link>\n          ))}\n        </div>\n        {/* {viewCount && ` · ${viewCount} views`} */}\n      </div>\n    </header>\n  );\n}\nexport default PostHeader;\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport './style.scss';\n\nfunction PostNavigator({ prevPost, nextPost }) {\n  return (\n    <div className=\"post-navigator\">\n      <div className=\"post-navigator-card-wrapper\">\n        {nextPost && (\n          <Link className=\"post-card prev\" key={nextPost.id} to={nextPost.slug}>\n            <div className=\"direction\">이전 글</div>\n            <div className=\"title\">{nextPost.title}</div>\n          </Link>\n        )}\n      </div>\n      <div className=\"post-navigator-card-wrapper\">\n        {prevPost && (\n          <Link className=\"post-card next\" key={prevPost.id} to={prevPost.slug}>\n            <div className=\"direction\">다음 글</div>\n            <div className=\"title\">{prevPost.title}</div>\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default PostNavigator;\n","import React from 'react';\nimport './style.scss';\n\nfunction PostContent({ html }) {\n  return (\n    <div className=\"post-content\">\n      <div className=\"markdown\" dangerouslySetInnerHTML={{ __html: html }} />\n      <div className=\"divider\" />\n    </div>\n  );\n}\n\nexport default PostContent;\n","import React, { createRef, useEffect, useRef } from 'react';\n\nconst src = 'https://utteranc.es/client.js';\nconst branch = 'master';\n\nfunction Utterances({ repo, path }) {\n  const rootElm = createRef();\n  const isUtterancesLoaded = useRef(false);\n\n  useEffect(() => {\n    if (!rootElm.current || isUtterancesLoaded.current) return;\n    const storedIsDarkMode = localStorage.getItem('isDarkMode');\n\n    const utterances = document.createElement('script');\n    const utterancesConfig = {\n      src,\n      repo,\n      branch,\n      theme: JSON.parse(storedIsDarkMode) ? 'photon-dark' : 'github-light',\n      label: 'comment',\n      async: true,\n      'issue-term': 'pathname',\n      crossorigin: 'anonymous',\n    };\n\n    Object.keys(utterancesConfig).forEach((configKey) => {\n      utterances.setAttribute(configKey, utterancesConfig[configKey]);\n    });\n    rootElm.current.appendChild(utterances);\n    isUtterancesLoaded.current = true;\n  }, [repo, rootElm, path]);\n\n  return <div className=\"utterances\" ref={rootElm} />;\n}\n\nexport default Utterances;\n","import React, { useEffect, useState } from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../layout';\nimport Seo from '../components/seo';\nimport PostHeader from '../components/post-header';\nimport PostNavigator from '../components/post-navigator';\nimport Post from '../models/post';\nimport PostContent from '../components/post-content';\nimport Utterances from '../components/utterances';\n\nfunction BlogTemplate({ data }) {\n  const [viewCount, setViewCount] = useState(null);\n\n  const curPost = new Post(data.cur);\n  const prevPost = data.prev && new Post(data.prev);\n  const nextPost = data.next && new Post(data.next);\n  const { siteUrl, comments } = data.site?.siteMetadata;\n  const utterancesRepo = comments?.utterances?.repo;\n\n  useEffect(() => {\n    if (!siteUrl) return;\n    const namespace = siteUrl.replace(/(^\\w+:|^)\\/\\//, '');\n    const key = curPost.slug.replace(/\\//g, '');\n\n    fetch(\n      `https://api.countapi.xyz/${\n        process.env.NODE_ENV === 'development' ? 'get' : 'hit'\n      }/${namespace}/${key}`,\n    ).then(async (result) => {\n      const data = await result.json();\n      setViewCount(data.value);\n    });\n  }, [siteUrl, curPost.slug]);\n\n  return (\n    <Layout>\n      <Seo title={curPost?.title} description={curPost?.excerpt} />\n      <PostHeader post={curPost} viewCount={viewCount} />\n      <PostContent html={curPost.html} />\n      <PostNavigator prevPost={prevPost} nextPost={nextPost} />\n      {utterancesRepo && <Utterances repo={utterancesRepo} path={curPost.slug} />}\n    </Layout>\n  );\n}\n\nexport default BlogTemplate;\n\nexport const pageQuery = graphql`\n  query($slug: String, $nextSlug: String, $prevSlug: String) {\n    cur: markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      excerpt(pruneLength: 500, truncate: true)\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n      }\n      fields {\n        slug\n      }\n    }\n\n    next: markdownRemark(fields: { slug: { eq: $nextSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n      }\n      fields {\n        slug\n      }\n    }\n\n    prev: markdownRemark(fields: { slug: { eq: $prevSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n      }\n      fields {\n        slug\n      }\n    }\n\n    site {\n      siteMetadata {\n        siteUrl\n        comments {\n          utterances {\n            repo\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["Post","node","id","html","excerpt","frontmatter","fields","slug","categories","title","author","date","this","split","PostHeader","post","viewCount","React","className","map","category","Link","key","to","PostNavigator","prevPost","nextPost","PostContent","dangerouslySetInnerHTML","__html","Utterances","repo","path","rootElm","createRef","isUtterancesLoaded","useRef","useEffect","current","storedIsDarkMode","localStorage","getItem","utterances","document","createElement","utterancesConfig","src","branch","theme","JSON","parse","label","async","crossorigin","Object","keys","forEach","configKey","setAttribute","appendChild","ref","BlogTemplate","data","setViewCount","useState","curPost","cur","prev","next","siteUrl","comments","site","siteMetadata","utterancesRepo","namespace","replace","fetch","then","result","json","value","Layout","Seo","description"],"sourceRoot":""}