{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts",
    "result": {"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"1a4808a9-d42d-52f5-b5bb-bad786e08f68","excerpt":"Date와 인연이 깊은지 날짜 선택 UI를 custom 해서 개발해야 하는 경험을 두 번째 하게 되었다. mui datepicker를 붙이기엔 너무 과해서  react-calendar 라이브러리를 사용하려고 했는데, 문제는 input은 함께 딸려오지 않기 때문에 input 관련 interaction은 직접 구현해야 했다. 인 하우스용 서비스라 여러 라이브러리 참고해서 직접 인터렉션을 정의하고 구현해 보았는데 기록 차 경험을 남겨본다!  TL;DR; 전체 구현 결과물은 code sandbox에서 확인할 수 있다. DatePicker 컴포넌트를 개발해 보자! (calendar는 라이브러리를 사용) 딱히 input에 대한 큰 요구사항이 없이 기능 개발을 해야 하는 경우 그냥 react-date-picker를 써라 DatePicker 컴포넌트 개발 dependency react-calendar dayjs props 설계 minDate, maxDate: date range를 지원해야하므로 …","fields":{"slug":"/feature/input-date/"},"frontmatter":{"categories":"feature","title":"날짜 입력 input 인터렉션 개발기","date":"April 23, 2023","draft":false}},"next":{"fields":{"slug":"/react/recoil-introduction/"}},"previous":null},{"node":{"id":"77244793-f1ae-56d8-adea-558b747f6cc1","excerpt":"React 18로 버전업 하면서 프로젝트에 Recoil을 도입했는데, 그 과정에서 고민했던 내용을 기록차 남겨본다.\n TL;DR; 개념 정리나 장단점 비교에 대해서는 이미 알고 계신분들도 있을 것 같아서 폴더구조나 Redux를 대체하는게 맞는가에 대해서만 먼저 간단하게 요약한 내용을 공유한다. 1. 폴더 구조는 data source 별로 나누자 Suggested folder structure for atoms and selectors recoil 폴더 하위에 data source 별로 나누자 data source 하위에 atoms, selectors, hooks를 두자 2. concurrency mode 사용하려면 Redux는 버리고 Recoil로 넘어가야하나? useSyncExternalStore hook 을 사용해서 Redux에서도 동시성 모드를 사용할 수 있다. 이 부분에 대해서 고민해 본 내용은 아래에.. Recoil 도입 배경 Recoil은 Facebook에서 개발한 상태…","fields":{"slug":"/react/recoil-introduction/"},"frontmatter":{"categories":"react","title":"Recoil 도입기(feat. 폴더구조)","date":"April 08, 2023","draft":false}},"next":{"fields":{"slug":"/trouble-shooting/how-to-use-variable-optional-in-useMutation/"}},"previous":{"fields":{"slug":"/feature/input-date/"}}},{"node":{"id":"165efc5d-e61d-55cb-a415-702d64af4311","excerpt":"Introduction #1077 이슈를 보면 mutateFn의 variable을 필수값으로 변경한 이력을 볼 수 있다. mutation인데 왜 variable이 없냐고? 나의 경우에는 URL의 있는 queryParams를 읽어와서 데이터를 넘겨주면 되기 때문에 useSomething hook 안에서 처리하고 싶었다. 문제상황 mutate() 와 같이 variable에 아무 값도 넣지 않고 mutation 함수를 호출 할 수 없다.\nTVariables 타입에 undefined도 줘보고 이래저래 별짓을 다해봐도 필수값을 optional 하게 바꿀수는 없었다. 에러 발생\n 해결 실질적으로는 mute 함수에서 variable을 정의해서 넣어주는 것이기 때문에 그렇게 꼼수해결법도 아니다.","fields":{"slug":"/trouble-shooting/how-to-use-variable-optional-in-useMutation/"},"frontmatter":{"categories":"react troubleshooting","title":"[react-query] useMutation에서 variable 옵셔널하게 사용하기","date":"February 15, 2023","draft":false}},"next":{"fields":{"slug":"/react/react-query-basic/"}},"previous":{"fields":{"slug":"/react/recoil-introduction/"}}},{"node":{"id":"1006ea2d-51dc-5feb-8034-3df2af785e66","excerpt":"Introduction 이 글을 읽기전 React의 상태관리 종류 4가지를 먼저 읽으면 이해가 쉬울 수 있다. 얼마전 회사 프로젝트에 react-query를 도입하여 사용중인데 정말 너무너무 좋다. react-query를 이용해서 server state를 분리하다보니 loading 처리나, refetch 등 불필요한 코드가 많이 줄었다. 뭐든지 처음이 어렵지 큰 그림을 알고있으면 도입하여 적용하는데에는 큰 문제가 없고, 사용하면서 상황에 맞게 옵션과 아키텍쳐를 변경하면 된다고 생각하기 때문에, 이번 포스팅에서는 react-query를 적용하기 위해 필요한 전반적인 개념을 정리해보고자 한다. 용도 react-query는 서버 데이터 관리를 위한 라이브러리다.  이 라이브러리는 API 호출, 캐시 및 상태 관리, 오류 처리 등의 작업을 간단하게 처리할 수 있도록 도와준다. 서버 데이터 관리는 중요한 부분 중 하나다. 클라이언트에서는 서버로부터 데이터를 가져와(Read) 화면에 그려주고…","fields":{"slug":"/react/react-query-basic/"},"frontmatter":{"categories":"react","title":"react-query 시작하기 (feat. Tanstack)","date":"February 05, 2023","draft":false}},"next":{"fields":{"slug":"/react/react-state-management/"}},"previous":{"fields":{"slug":"/trouble-shooting/how-to-use-variable-optional-in-useMutation/"}}},{"node":{"id":"6f6e591f-8d2d-5bcb-bb4b-894aed0409ff","excerpt":"Introduction react의 상태관리 종류 4가지를 알아보고, 각각의 종류별로 왜 다르게 관리해야하는지와 React에서 제공하는 API 혹은 어떤 라이브러리를 사용해서 관리하면 좋을지 알아보도록 하자. 상태관리 종류 Local state Global state App 어느곳(여러 컴포넌트)에서 state를 확인하거나 업데이트하기 위해서 필요함. 예: authenticated user state - logged in/out Server state 서버로 받은 데이터가 UI 상태와 통합되어야 하는 경우 필요함. 예: loading, error… 대표 라이브러리: SWR, react-query URL state URL에 존재하는 데이터(pathname, query params..) 1) Local state useState useReducer useReducer vs useState 차이 useState는 하나의 state operation만 가능했다면, useReducer는 여…","fields":{"slug":"/react/react-state-management/"},"frontmatter":{"categories":"react","title":"React의 상태관리 종류 4가지","date":"February 03, 2023","draft":false}},"next":{"fields":{"slug":"/react/error-handle/"}},"previous":{"fields":{"slug":"/react/react-query-basic/"}}},{"node":{"id":"ec86dfcb-52fd-5b6b-a5a1-acf46ea407ca","excerpt":"고민 혹시 제가 내린 결론에 다른 의견을 주신다면 매우 감사합니다. 🙇🏻‍♀️ 에러를 발생 vs 사전 확인을 통해 예외 처리 어느 부분까지 사전 확인이 필요한 걸까? 고민하게 된 배경 함수의 매개변수가 의도한 것과 다른 값이 들어왔을 때 에러가 발생할 수 있다. 그런데 문득 에러를 발생하게 하는 게 올바른 것인가? 아니면 애초에 에러가 발생할 상황을 하나도 빠짐없이 막는 것이 올바른 것인가? 고민이 들었다. 위의 코드를 보면 event 객체가 무조건 존재할 상황을 가졍하고 있으므로 만약 비정상적인 event 객체가 첫 번째 인자로 전달된다면 에러가 발생할 것이다. 그렇다면 이렇게 코드를 짜는 것이 좋을까? 애초에 event 객체가 존재하지 않을 수 있는 케이스를 고려해서 절대로 에러를 발생하지 않게 하는 것이 좋을까? 결론 App을 Crashed 시키지 않는 한해서 에러가 발생해야 하는 경우는 발생하게 내버려 두고, 예상할 수 있는 예외는 try…catch를 이용하여 에러가 전파되지 않도…","fields":{"slug":"/react/error-handle/"},"frontmatter":{"categories":"react","title":"에러 핸들링에 대한 고민 (feat. React)","date":"October 16, 2022","draft":false}},"next":{"fields":{"slug":"/browser/touch-mouse-event/"}},"previous":{"fields":{"slug":"/react/react-state-management/"}}},{"node":{"id":"396afcbf-a9a8-5bc3-92e0-6566b60139da","excerpt":"문제상황 dropdown 컴포넌트를 만들었는데, focus가 다른곳으로 이동하면 펼쳐져있던 dropdown이 접혀져야 해서 blur 이벤트 발생시 접히도록 했다. 그랬더니 펼쳐져 있는 항목 중 하나를 click 했을때, 위에서 설정한 blur 이벤트가 먼저 발생하면서 click 이벤트가 호출되지 않는 이슈가 문제였다. dropdown_비정상동작.gif 문제의 코드 TL;DR Touch, mouse 이벤트 순서 touchstart touchmove touchend mouseover mousemove mousedown mouseup click 해결방법 click시 처리해줘야 하는 이벤트 핸들러를 click 이 아닌 mousedown 에서 처리해준다. dropdown_정상동작.gif Dropdown CodeSandbox Touch and mouse 이벤트 그러면 지금부터는 web.dev 문서를 살펴보면서 알게된 touch 이벤트의 도입 배경과 touch, mouse 이벤트를 함께 다루기…","fields":{"slug":"/browser/touch-mouse-event/"},"frontmatter":{"categories":"feature browser","title":"Touch, Mouse 이벤트 함께 다루기 (feat. dropdown)","date":"September 18, 2022","draft":false}},"next":{"fields":{"slug":"/infra/jenkins-bitbucket/"}},"previous":{"fields":{"slug":"/react/error-handle/"}}},{"node":{"id":"38eb4031-a967-5e54-a833-6590fccc6699","excerpt":"목표 Jenkins pipeline을 이용하여, bitbucket에서 PR 생성시 Jenkins job을 실행시키고 그 결과를 slack으로 전송한다. (Jenkins 내의 credential 설정이나 자세한 Jenkins 플러그인 설정 사항은 해당 글에서 포함하지 않음.) Webhook 웹훅이란 뭘까? 위의 목표를 이루려면 우리는 웹훅이 필요하다. 어플리케이션에 한정하여 특정 이벤트가 발생할 때 지정된 URL로 push 알림을 보내는 것이 webhook이다. callback 이랑 비슷한데, 조금 더 작은 범위라고 생각하면 된다. 이 방법은 주기적으로 검사하여 변경 사항이 있는지 확인하는 것보다 훨씬 효율적이다.  구현 방법 우리는 bitbucket에서 PR이 생성되었을때 Jenkins 플러그인인 Generic Webhook Trigger를 호출 하고, Jenkins Job 실행이 끝났을 때 slack Webhook을 호출 할 것이다. 1. Jekins에서 Generic Webho…","fields":{"slug":"/infra/jenkins-bitbucket/"},"frontmatter":{"categories":"infra","title":"Bitbucket과 Jenkins를 연동하여 테스트 자동화 (feat. Generic Webhook Trigger)","date":"September 04, 2022","draft":false}},"next":{"fields":{"slug":"/feature/confirm/"}},"previous":{"fields":{"slug":"/browser/touch-mouse-event/"}}},{"node":{"id":"57d83e74-79b4-539d-a91f-f600f329fa6f","excerpt":"보통 어플리케이션에서 공통된 디자인의 confirm 창을 사용한다. 이때, window.confirm과 같이 고객의 OK/CANCEL 클릭 여부에 따라서 다음 동작을 이어나가게 하고싶다면 어떻게 구현해야할까? 준비물 Modal Component (global 하게 등록) Global State Modal Hook 보통 웹 어플리케이션에서는 공통된 디자인의 confirm을 사용하므로 화면에 보여지는 역할을 하는 Modal Component가 필요하다. 이 컴포넌트는 어플리케이션 전반에 걸쳐서 자주 사용하는 라이브러리이므로 App.js에서 global 하게 로드한다. global 하게 등록된 Modal 컴포넌트를 제어하기 위해서는 어플리케이션 어느 곳에서든 제어 가능하게 하기 위해서 global state가 필요하다. 그래서 modal 관련 state가 변경되었을때, Modal 컴포넌트가 render 되게 한다. 이제 window.confirm 처럼 사용하기 위해 confirm 함수를…","fields":{"slug":"/feature/confirm/"},"frontmatter":{"categories":"feature","title":"Promise를 사용하여 window.confirm 구현하기","date":"August 19, 2022","draft":false}},"next":null,"previous":{"fields":{"slug":"/infra/jenkins-bitbucket/"}}}],"categories":["All","feature","react","troubleshooting","browser","infra"]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}