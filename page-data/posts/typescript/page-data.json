{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/typescript",
    "result": {"pageContext":{"currentCategory":"typescript","categories":["All","typescript","react","browser","infra","a11y","javascript","cs","feature","troubleshooting"],"edges":[{"node":{"id":"9dd20546-793a-5b1e-928e-e7dde001d44c","excerpt":"Argument of type ‘string’ is not assignable to parameter of type ‘“apple” | “banana”‘.(2345) 타입스크립트 사용시 때때로 예상치 못한 타입 호환성 문제에 직면하곤 합니다. 엄격한 타입 시스템을 가지고 있는 타입스크립트로 코드를 작성하다 보면 더욱 이러한 문제와 자주 직면합니다. 하지만 다행히도, 타입스크립트는 이러한 문제들을 해결할 수 있는 강력한 도구들을 제공합니다. 이 글에서는 타입 호환성 문제를 해결하는 데 있어 as const와 satisfies라는 두 가지 도구의 사용 방법과 각각의 장점에 대해 알아보겠습니다. 먼저 우리가 자주 마주할 수 있는 상황을 예시 코드로 살펴보겠습니다. 위에 에러 메시지는 함수의 인자로 예상되는 타입과 실제로 전달된 타입이 일치하지 않을 때 발생합니다. 이 경우, printPerson 함수는 \"apple\" 또는 \"banana\"라는 구체적인 문자열 타입을 기대하지만, perso…","fields":{"slug":"/typescript/as-const-vs-satisfies/"},"frontmatter":{"categories":"typescript","title":"[TypeScript] 타입 호환성 문제 해결하기: as const vs. satisfies","date":"March 31, 2024","draft":false}},"next":{"fields":{"slug":"/react/html-node-streaming/"}},"previous":null}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}