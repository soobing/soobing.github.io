{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/cs",
    "result": {"pageContext":{"currentCategory":"cs","categories":["All","translate","typescript","react","browser","infra","a11y","react-query","javascript","cs","feature","troubleshooting"],"edges":[{"node":{"id":"44fd3704-304a-5b2a-8702-af196e247d28","excerpt":"원글: https://github.com/kamranahmedse/design-patterns-for-humans/blob/master/readme.md 역자주: 이 글은 Kamran Ahmed의 글이며, PHP-7 기준으로 작성된 예제 코드를 타입스크립트로 변경하였습니다. logo 🎉 디자인 패턴에 대한 초간단 설명입니다! 🎉 누구든지 혼란스럽게 만들 수 있는 주제입니다. 이 글에서는 최대한 간단한 방식으로 설명함으로써 당신의 기억 속 (그리고 아마도 제 기억)에 각인시키기 위해 노력할 것입니다. 저의 다른 프로젝트도 확인하고 트위터에서 “안녕”이라고 인사해 보세요. 생성 패턴 구조 패턴 행동 패턴 심플 팩토리(Simple Factory) 어댑터(Adapter) 책임 연쇄(Chain of Responsibility) 팩토리 메서드(Factory Method) 브릿지(Bridge) 명령(Command) 추상 팩토리(Abstract Factory) 컴포지트(Composite) 반복자…","fields":{"slug":"/cs/design-patterns-for-humans/"},"frontmatter":{"categories":"translate cs","title":"(번역) 우리들을 위한 디자인 패턴","date":"August 27, 2023","draft":false}},"next":{"fields":{"slug":"/javascript/garbage-collection/"}},"previous":{"fields":{"slug":"/react/decoupling-ui-and-logic-in-react-a-clean-code-approach-with-headless-components/"}}},{"node":{"id":"872218ff-8507-5910-8001-bc52d72fca27","excerpt":"원글: https://javascript.plainenglish.io/6-caching-strategies-to-remember-while-designing-cache-system-da058a3757cf 캐시 시스템 관련 용어, 읽기 vs 쓰기 중심의 애플리케이션에서 캐싱 전략, 캐시를 무효화하는 방법 등에 대해서 알려드리겠습니다. 개요 캐싱의 목표는 원본 소스에서 데이터를 가져오는 횟수를 줄여 처리 속도를 높이고 대기 시간을 감소시키는 것입니다. 캐싱은 인메모리 캐싱, 디스크 캐싱, 데이터베이스 캐싱, CDN 캐싱과 같은 다양한 수준의 아키텍처에서 구현될 수 있습니다. 데이터는 각각 고유한 이점이 있는 다양한 기술을 사용하여 캐싱할 수 있습니다. 인메모리 캐싱은 컴퓨터의 주 메모리에 데이터를 저장하여 디스크 저장소 보다 빠른 액세스를 제공합니다. 반면 디스크 캐싱은 하드 디스크에 데이터를 저장하므로 주 메모리보다는 느리지만 원격 소스에서 데이터를 가져오는 것보다 빠릅니다. 데이터…","fields":{"slug":"/cs/6-caching-strategies/"},"frontmatter":{"categories":"translate cs","title":"(번역) 캐시 시스템 설계할 때 기억해야 할 6가지 캐싱 전략","date":"June 13, 2023","draft":false}},"next":{"fields":{"slug":"/javascript/metaprogramming/"}},"previous":{"fields":{"slug":"/react/How-to-manage-server-state-with-React-Query/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}