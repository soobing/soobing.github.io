{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/react-query",
    "result": {"pageContext":{"currentCategory":"react-query","categories":["All","framework","react","next","translate","typescript","browser","a11y","infra","react-query","javascript","cs","feature","troubleshooting","test"],"edges":[{"node":{"id":"161feee4-18f2-5161-8900-a9bc5eda4367","excerpt":"지난 글에서 react-query의 hydrate, dehydrate을 통해 서버에서 prefetching 한 데이터 사용하는 방법에 대해서 살펴보았습니다. 서버에서 prefetching 한 데이터 사용하기 오늘은 조금 실용적으로 Next.js 13, 14 버전의 app router에서 react-query를 어떻게 사용하고 세팅하면 좋을지 고민했던 내용에 대해서 이야기해보도록 하겠습니다. 해당 글은 23년 10월에 메이저 버전 업데이트된, Next.js 14와 React-Query 5 를 기준으로 작성된 글입니다. 예시로 보여주는 코드는 저의 next-14-react-query repo에서 확인 할 수 있습니다. 제가 크게 고민했던 문제는 아래 세 가지입니다. Hydrate vs ReactQueryStreamedHydration 두 가지 API 중에 어떤 것을 채택할까? Hydration API 사용 시에 RSC, RCC 모두에서 깔끔한 코드를 유지하려면 queryOption은 …","fields":{"slug":"/react/next-app-router-react-query/"},"frontmatter":{"categories":"react react-query","title":"Next.js app router에서 React Query 사용하면서 고민했던 것들","date":"January 07, 2024","draft":false}},"next":{"fields":{"slug":"/javascript/the-5-most-innovative-proposals-for-javascript-planned-for-2024/"}},"previous":{"fields":{"slug":"/react/storybook-react-server-components/"}}},{"node":{"id":"d77b67b4-3ea0-53b0-b513-8a24dd4da08d","excerpt":"Next.js나 Remix 같은 프레임워크 내에서 React-Query를 사용한다면, 서버 렌더링 될 때 요청 후 응답받은 데이터를 SPA 방식으로 전환되고 나서도 유지할 수 있을까요? 어떻게 가능할까요? React Query의 hydrate와 dehydrate는 서버에서 미리 가져온 데이터를 클라이언트 사이드에서 재사용 할 수 있게 해줍니다. 이번 글을 통해 서버 렌더링과 어떻게 이를 가능하게 하는지 hydrate와 dehydrate에  대해서 알아봅시다. Server Rendering 서버 렌더링은 사용자가 페이지를 로드하는 즉시 볼 수 있는 초기 HTML을 서버에서 생성하는 행위입니다. 이는 페이지 요청 시 즉시 발생할 수 있으며(SSR), 이전 요청이 캐시 되었거나 빌드 시간에 미리 생성(SSG) 할 수도 있습니다. 클라이언트 렌더링 애플리케이션에서는 사용자에게 화면에 콘텐츠를 표시하기 전에 최소 3번의 서버 왕복(roundtrips)이 필요합니다. 서버 렌더링은 위의 과정…","fields":{"slug":"/react/server-rendering-and-react-query/"},"frontmatter":{"categories":"react react-query","title":"서버에서 React Query  prefetching 한 데이터 사용하기","date":"December 10, 2023","draft":false}},"next":{"fields":{"slug":"/react/introducing-signals/"}},"previous":{"fields":{"slug":"/javascript/the-5-most-innovative-proposals-for-javascript-planned-for-2024/"}}},{"node":{"id":"1a5d4b16-06aa-572e-802e-98a3de358758","excerpt":"원문: https://www.tecforfun.com/frameworks/how-to-manage-server-state-with-react-query/ React Query는 React 애플리케이션에서 데이터 페칭과 캐싱 프로세스를 간소화하는 라이브러리입니다. 이 라이브러리는 API와 기타 데이터 소스로부터 데이터를 페칭하고 업데이트하는 데 필요한 도구와 유틸리티를 제공하며 데이터 페칭의 상태와 캐싱을 자동으로 관리합니다. 이 라이브러리는 React 컴포넌트에서 데이터를 더 쉽게 다룰 수 있도록 다양한 훅과 유틸리티를 제공합니다. 이 포스트에서는 React Query의 주요 기능에 대해 이야기하겠습니다. 여기서 제 목적은 가능한 한 빨리 React Query를 사용하여 작업을 시작할 수 있는 출발점을 제공하는 것입니다. React 앱 개발에 경험이 있다면, 클라이언트 상태 관리를 위해 Redux와 같은 라이브러리를 사용한 적이 있을 수 있습니다. 반면에, React Query는 …","fields":{"slug":"/react/How-to-manage-server-state-with-React-Query/"},"frontmatter":{"categories":"translate react react-query","title":"(번역) React Query를 사용하여 서버 상태를 관리하는 방법","date":"June 21, 2023","draft":false}},"next":{"fields":{"slug":"/cs/6-caching-strategies/"}},"previous":{"fields":{"slug":"/javascript/garbage-collection/"}}},{"node":{"id":"e19abd3b-8537-528d-a31e-3a74ebbb5cc5","excerpt":"Introduction #1077 이슈를 보면 mutateFn의 variable을 필수값으로 변경한 이력을 볼 수 있다. mutation인데 왜 variable이 없냐고? 나의 경우에는 URL의 있는 queryParams를 읽어와서 데이터를 넘겨주면 되기 때문에 useSomething hook 안에서 처리하고 싶었다. 문제상황 mutate() 와 같이 variable에 아무 값도 넣지 않고 mutation 함수를 호출 할 수 없다.\nTVariables 타입에 undefined도 줘보고 이래저래 별짓을 다해봐도 필수값을 optional 하게 바꿀수는 없었다. 에러 발생\n 해결 실질적으로는 mute 함수에서 variable을 정의해서 넣어주는 것이기 때문에 그렇게 꼼수해결법도 아니다.","fields":{"slug":"/trouble-shooting/how-to-use-variable-optional-in-useMutation/"},"frontmatter":{"categories":"react react-query troubleshooting","title":"React Query useMutation에서 variable 옵셔널하게 사용하기","date":"February 15, 2023","draft":false}},"next":{"fields":{"slug":"/react/react-query-basic/"}},"previous":{"fields":{"slug":"/react/recoil-introduction/"}}},{"node":{"id":"e1211b4f-4197-5605-879f-45d011d0d210","excerpt":"Introduction 이 글을 읽기전 React의 상태관리 종류 4가지를 먼저 읽으면 이해가 쉬울 수 있다. 얼마전 회사 프로젝트에 react-query를 도입하여 사용중인데 정말 너무너무 좋다. react-query를 이용해서 server state를 분리하다보니 loading 처리나, refetch 등 불필요한 코드가 많이 줄었다. 뭐든지 처음이 어렵지 큰 그림을 알고있으면 도입하여 적용하는데에는 큰 문제가 없고, 사용하면서 상황에 맞게 옵션과 아키텍쳐를 변경하면 된다고 생각하기 때문에, 이번 포스팅에서는 react-query를 적용하기 위해 필요한 전반적인 개념을 정리해보고자 한다. 용도 react-query는 서버 데이터 관리를 위한 라이브러리다.  이 라이브러리는 API 호출, 캐시 및 상태 관리, 오류 처리 등의 작업을 간단하게 처리할 수 있도록 도와준다. 서버 데이터 관리는 중요한 부분 중 하나다. 클라이언트에서는 서버로부터 데이터를 가져와(Read) 화면에 그려주고…","fields":{"slug":"/react/react-query-basic/"},"frontmatter":{"categories":"react react-query","title":"React Query  시작하기 (feat. Tanstack)","date":"February 05, 2023","draft":false}},"next":{"fields":{"slug":"/react/react-state-management/"}},"previous":{"fields":{"slug":"/trouble-shooting/how-to-use-variable-optional-in-useMutation/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}