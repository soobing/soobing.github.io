{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/javascript/the-5-most-innovative-proposals-for-javascript-planned-for-2024/",
    "result": {"data":{"cur":{"id":"89c9fc6f-c7cf-5570-825d-cf3cdc8a8655","html":"<blockquote>\n<p>원문: <a href=\"https://javascript.plainenglish.io/the-5-most-innovative-proposals-for-javascript-planned-for-2024-22139dd2f546\">https://javascript.plainenglish.io/the-5-most-innovative-proposals-for-javascript-planned-for-2024-22139dd2f546</a></p>\n</blockquote>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1114/format:webp/1*VmErsdZluCmilqbcYLIxTg.png\" alt=\"\"></p>\n<p><em>JavaScript Logo 2024</em></p>\n<p>자바스크립트가 빠른 속도로 발전함에 따라 2024년은 이 프로그래밍 언어에 있어 중요한 해가 될 것입니다. 이 글에서는 개발자들이 자바스크립트 코딩에 접근하는 방식을 재정의하기 위한 최신 제안을 자세히 살펴보겠습니다.</p>\n<p>이 글이 유용하길 바랍니다!</p>\n<p>시작해 봅시다!</p>\n<p><strong>목차</strong></p>\n<ul>\n<li>데코레이터</li>\n<li>Temporal API</li>\n<li>파이프라인 연산자</li>\n<li>Error cause</li>\n<li>레코드와 튜플</li>\n</ul>\n<h1 id=\"1-데코레이터\" style=\"position:relative;\"><a href=\"#1-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0\" aria-label=\"1 데코레이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 데코레이터</h1>\n<p>자바스크립트에 데코레이터가 도입된 것은 개발자가 클래스, 메서드, 프로퍼티 및 매개변수의 동작을 조작하고 개선할 수 있는 방법이 크게 발전했음을 의미합니다. 파이썬과 타입스크립트와 같은 다른 프로그래밍 언어에서 유래한 데코레이터는 기능을 추가하거나 수정하는 간결하고 선언적인 방법을 제공합니다. 언어 구문 내에서 직접 메타 프로그래밍 패턴을 허용하여, 보다 명확하고 표현력이 풍부한 코드로 만들 수 있습니다. 이를 통해 로깅, 성능 모니터링, 기존 코드의 동작 수정 또는 확장과 같은 작업을 간소화할 수 있습니다. 따라서 데코레이터는 자바스크립트 코드를 모듈화하고, 유지보수하기 쉽고, 다재다능하게 만들어 모던 프로그래밍 방식 및 패러다임에 부합하도록 합니다.</p>\n<p>예시</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">target</span><span class=\"mtk1\">, </span><span class=\"mtk12\">name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">descriptor</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">originalMethod</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">descriptor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">descriptor</span><span class=\"mtk1\">.</span><span class=\"mtk11\">value</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">`Calling </span><span class=\"mtk4\">${</span><span class=\"mtk12\">name</span><span class=\"mtk4\">}</span><span class=\"mtk8\"> with arguments:`</span><span class=\"mtk1\">, </span><span class=\"mtk12\">args</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">originalMethod</span><span class=\"mtk1\">.</span><span class=\"mtk11\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">, </span><span class=\"mtk12\">args</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  };</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">descriptor</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">MyClass</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  @</span><span class=\"mtk12\">log</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">myMethod</span><span class=\"mtk1\">(</span><span class=\"mtk12\">arg1</span><span class=\"mtk1\">, </span><span class=\"mtk12\">arg2</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// 메서드 구현</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">myInstance</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">MyClass</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">myInstance</span><span class=\"mtk1\">.</span><span class=\"mtk11\">myMethod</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 로그: &quot;Calling myMethod with arguments: [1, 2]&quot;</span></span></span></code></pre>\n<p>또는 메서드 실행 시간을 측정한다고 가정해 봅니다. 메서드가 실행되는 데 걸리는 시간을 로깅하는 데코레이터를 만들 수 있습니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">measureExecutionTime</span><span class=\"mtk1\">(</span><span class=\"mtk12\">target</span><span class=\"mtk1\">, </span><span class=\"mtk12\">name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">descriptor</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">originalMethod</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">descriptor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">descriptor</span><span class=\"mtk1\">.</span><span class=\"mtk11\">value</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">start</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">performance</span><span class=\"mtk1\">.</span><span class=\"mtk11\">now</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">originalMethod</span><span class=\"mtk1\">.</span><span class=\"mtk11\">apply</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">, </span><span class=\"mtk12\">args</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">end</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">performance</span><span class=\"mtk1\">.</span><span class=\"mtk11\">now</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">`</span><span class=\"mtk4\">${</span><span class=\"mtk12\">name</span><span class=\"mtk4\">}</span><span class=\"mtk8\"> took </span><span class=\"mtk4\">${</span><span class=\"mtk12\">end</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">start</span><span class=\"mtk4\">}</span><span class=\"mtk8\"> milliseconds.`</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  };</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">descriptor</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ExampleClass</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  @</span><span class=\"mtk12\">measureExecutionTime</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">someMethod</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// 메서드 구현</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">example</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ExampleClass</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">example</span><span class=\"mtk1\">.</span><span class=\"mtk11\">someMethod</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">// someMethod에 소요된 시간을 로깅</span></span></span></code></pre>\n<p>3단계</p>\n<p>더 보기: <a href=\"https://github.com/tc39/proposal-decorators\">https://github.com/tc39/proposal-decorators</a></p>\n<h1 id=\"2-temporal-api\" style=\"position:relative;\"><a href=\"#2-temporal-api\" aria-label=\"2 temporal api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Temporal API</h1>\n<p>자바스크립트의 Temporal API 제안은 기존 <code>Date</code> 객체의 한계와 복잡성에 대한 대응입니다. 독특하고 직관적이지 않은 디자인으로 유명한 <code>Date</code> API는 시간대와 날짜를 비효율적으로 처리하여 개발자들을 불편하게 했습니다. 이와 대조적으로, Temporal API는 더 직관적이고 강력하며 사용자 친화적으로 설계되었습니다. 이는 날짜, 시간 및 시간대를 더 잘 관리할 수 있게하여, 이러한 요소를 더 쉽게 생성하고 조작할 수 있습니다. 또한, 비교 및 계산과 같은 일반적인 시간 관련 작업을 처리하기 위해 더 풍부한 데이터 타입과 편리한 방법을 제공합니다. 이 API는 자바스크립트에서 날짜와 시간을 다루는 작업을 더욱 견고하고, 가독성 있게 만들며, <code>Date</code> 객체와 관련된 일반적인 오류를 없애기 위한 노력의 결과물입니다. 이 API의 도입으로 개발자들은 애플리케이션의 시간적 측면을 더 효율적으로 처리할 수 있게 되어, 코드 품질과 사용자 경험을 향상시킬 수 있습니다.</p>\n<p><strong>UTC 처리 개선</strong></p>\n<p>AS-IS</p>\n<p>UTC 시간을 특정 시간대로 변환하는 것은 번거롭고 오류가 발생하기 쉬운데, 특히 서머 타임(Daylight Saving Time)과 같은 변경 사항을 고려할 때 그렇습니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">now</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Date</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">utcHour</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">now</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getUTCHours</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// UTC 시간을 수동으로 다른 시간대로 변환하기</span></span></span></code></pre>\n<p>TO-BE</p>\n<p>Temporal을 사용하면 어떤 시간대에서든 쉽게 시간을 얻을 수 있으며, 서머 타임과 같은 미묘한 부분들을 자동으로 처리할 수 있습니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">now</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Temporal</span><span class=\"mtk1\">.</span><span class=\"mtk12\">now</span><span class=\"mtk1\">.</span><span class=\"mtk11\">instant</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">hourInTokyo</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">now</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toZonedDateTimeISO</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;Asia/Tokyo&#39;</span><span class=\"mtk1\">).</span><span class=\"mtk12\">hour</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>이 예시에서, Temporal API는 UTC 시간을 다루고 다른 시간대로 변환하는 작업을 크게 간소화 해줍니다. <code>Date</code> 객체에서는 더 복잡하고 직관적이지 않았습니다.</p>\n<p><strong>날짜에 일수 추가하기</strong></p>\n<p>AS-IS</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">today</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Date</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nextWeek</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Date</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">nextWeek</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setDate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">today</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getDate</span><span class=\"mtk1\">() + </span><span class=\"mtk7\">7</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>TO-BE</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">now</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Temporal</span><span class=\"mtk1\">.</span><span class=\"mtk12\">now</span><span class=\"mtk1\">.</span><span class=\"mtk11\">plainDate</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nextWeek</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">today</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">days:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">7</span><span class=\"mtk1\"> });</span></span></span></code></pre>\n<p><strong>두 날짜 비교하기</strong></p>\n<p>AS-IS</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">date1</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Date</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2023</span><span class=\"mtk1\">, </span><span class=\"mtk7\">3</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// April 1, 2023</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">date2</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Date</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2023</span><span class=\"mtk1\">, </span><span class=\"mtk7\">3</span><span class=\"mtk1\">, </span><span class=\"mtk7\">15</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// April 15, 2023</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isAfter</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">date2</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">date1</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// true</span></span></span></code></pre>\n<p>TO-BE</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">date1</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Temporal</span><span class=\"mtk1\">.</span><span class=\"mtk12\">PlainDate</span><span class=\"mtk1\">.</span><span class=\"mtk11\">from</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">year:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">2023</span><span class=\"mtk1\">, </span><span class=\"mtk12\">month:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">4</span><span class=\"mtk1\">, </span><span class=\"mtk12\">day:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">date2</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Temporal</span><span class=\"mtk1\">.</span><span class=\"mtk12\">PlainDate</span><span class=\"mtk1\">.</span><span class=\"mtk11\">from</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">year:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">2023</span><span class=\"mtk1\">, </span><span class=\"mtk12\">month:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">4</span><span class=\"mtk1\">, </span><span class=\"mtk12\">day:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">15</span><span class=\"mtk1\"> });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isAfter</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Temporal</span><span class=\"mtk1\">.</span><span class=\"mtk12\">PlainDate</span><span class=\"mtk1\">.</span><span class=\"mtk11\">compare</span><span class=\"mtk1\">(</span><span class=\"mtk12\">date2</span><span class=\"mtk1\">, </span><span class=\"mtk12\">date1</span><span class=\"mtk1\">) &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// true</span></span></span></code></pre>\n<p>3단계</p>\n<p>더 보기: <a href=\"https://tc39.es/proposal-temporal/docs/\">https://tc39.es/proposal-temporal/docs/</a></p>\n<h1 id=\"3-파이프라인-연산자-\" style=\"position:relative;\"><a href=\"#3-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EC%97%B0%EC%82%B0%EC%9E%90-\" aria-label=\"3 파이프라인 연산자  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 파이프라인 연산자 (<code>|></code>)</h1>\n<p>자바스크립트의 파이프라인 연산자(<code>|></code>)는 여러 함수 호출이 포함된 코드의 가독성과 효율성을 향상시키기 위해 제안된 기능입니다. 이 연산자는 보다 더 함수형 스타일의 문법을 가능하게 하여, 데이터를 일련의 함수를 통해 흐르게 하는 것을 용이하게 합니다. 특히 데이터 변환 또는 수학적 연산과 같은 시나리오에서 복잡한 표현을 단순화하며, 하나의 함수 출력을 다음 함수의 입력으로 직접 전달할 수 있게 함으로써 중첩된 함수 호출의 필요성을 줄이고 전반적인 코드의 명확성을 높입니다. 파이프라인 연산자의 도입은 자바스크립트를 함수형 프로그래밍 패턴에 더 접근하기 쉽게 만드는 중요한 단계로, 개발자들이 더 직관적이고 유지보수가 쉬운 코드를 작성할 수 있게 지원합니다.</p>\n<p>AS-IS</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">double</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">x</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">x</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addFive</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">x</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">x</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">5</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">addFive</span><span class=\"mtk1\">(</span><span class=\"mtk11\">double</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">)); </span><span class=\"mtk3\">// 25</span></span></span></code></pre>\n<p>TO-BE</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">double</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">x</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">x</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addFive</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">x</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">x</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">5</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">10</span><span class=\"mtk1\"> |&gt; </span><span class=\"mtk12\">double</span><span class=\"mtk1\"> |&gt; </span><span class=\"mtk12\">addFive</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// 25</span></span></span></code></pre>\n<p>또는</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = -</span><span class=\"mtk7\">16</span><span class=\"mtk1\"> |&gt; </span><span class=\"mtk10\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk11\">abs</span><span class=\"mtk1\"> |&gt; </span><span class=\"mtk10\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sqrt</span><span class=\"mtk1\"> |&gt; </span><span class=\"mtk10\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk11\">round</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>또는</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> = [</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk7\">3</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\">, </span><span class=\"mtk7\">5</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">doubledAndFiltered</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> |&gt; (</span><span class=\"mtk12\">_</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_</span><span class=\"mtk1\">.</span><span class=\"mtk11\">map</span><span class=\"mtk1\">(</span><span class=\"mtk12\">x</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">x</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span><span class=\"mtk1\">)) |&gt; (</span><span class=\"mtk12\">_</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_</span><span class=\"mtk1\">.</span><span class=\"mtk11\">filter</span><span class=\"mtk1\">(</span><span class=\"mtk12\">x</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">x</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">3</span><span class=\"mtk1\"> !== </span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">doubledAndFiltered</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// [4, 8, 10]</span></span></span></code></pre>\n<p>2단계</p>\n<p>더 보기: <a href=\"https://github.com/tc39/proposal-pipeline-operator\">https://github.com/tc39/proposal-pipeline-operator</a></p>\n<h1 id=\"4-error-cause\" style=\"position:relative;\"><a href=\"#4-error-cause\" aria-label=\"4 error cause permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Error Cause</h1>\n<p>자바스크립트의 “Error Cause” 기능은 에러 객체에 선택적인 <code>cause</code> 속성을 도입하여 디버깅 능력을 크게 향상시킵니다. 이 제안은 보다 상세한 에러 정보의 필요성에 의해 추진되며, 개발자들이 에러의 근본 원인을 더 쉽게 이해할 수 있게 합니다. <code>cause</code> 속성은 에러에 대한 구조화된 데이터를 제공하여 더 나은 문제 진단과 빠른 해결을 가능하게 합니다. 이는 에러가 중첩되거나 여러 원인에서 발생할 수 있는 복잡한 애플리케이션에서 특히 유용합니다. 에러 객체와 함께 추가적인 맥락을 포함할 수 있게 함으로써, “Error Cause” 기능은 디버깅 과정을 간소화하고 자바스크립트 애플리케이션에서의 에러 처리를 개선하려는 목적을 가집니다.</p>\n<p>예시</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">doRSA</span><span class=\"mtk1\">(</span><span class=\"mtk12\">p</span><span class=\"mtk1\">, </span><span class=\"mtk12\">q</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk10\">Number</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isInteger</span><span class=\"mtk1\">(</span><span class=\"mtk12\">p</span><span class=\"mtk1\">) || !</span><span class=\"mtk10\">Number</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isInteger</span><span class=\"mtk1\">(</span><span class=\"mtk12\">q</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">throw</span><span class=\"mtk1\"> </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Error</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;RSA key generation requires integer inputs.&quot;</span><span class=\"mtk1\">, {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">cause:</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">code:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;NonInteger&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">values:</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">p</span><span class=\"mtk1\">, </span><span class=\"mtk12\">q</span><span class=\"mtk1\">] },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 추가 코드는 여기에...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h1 id=\"5-레코드와-튜플\" style=\"position:relative;\"><a href=\"#5-%EB%A0%88%EC%BD%94%EB%93%9C%EC%99%80-%ED%8A%9C%ED%94%8C\" aria-label=\"5 레코드와 튜플 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 레코드와 튜플</h1>\n<p>자바스크립트에서 레코드와 튜플에 대한 제안은 불변 데이터 구조를 도입하여, 데이터를 처리하는 데 있어 더 견고하고 효율적인 방법을 제공합니다. 객체와 유사한 레코드와 배열과 비슷한 튜플은 주로 그들의 불변성(immutability)에서 차이가 있습니다. 이들을 수정하려는 모든 시도는 새로운 인스턴스를 생성하게 되어, 원래 상태를 보존합니다. 이러한 특성은 데이터의 무결성을 보장하고, 불변 구조가 추적하고 비교하기 더 간단하기 때문에 코드의 오류와 복잡성을 줄이는 데 도움이 됩니다. 이는 성능 개선으로 이어질 수 있습니다.</p>\n<p>예시</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">myRecord</span><span class=\"mtk1\"> = #{ </span><span class=\"mtk12\">name:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;Anibal&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">age:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">30</span><span class=\"mtk1\"> };</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">updatedRecord</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">myRecord</span><span class=\"mtk1\">.</span><span class=\"mtk11\">with</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">age:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">31</span><span class=\"mtk1\"> });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">updatedRecord</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// #{ name: &quot;Anibal&quot;, age: 31 }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">myRecord</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// #{ name: &quot;Anibal&quot;, age: 30 } (unchanged)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">myTuple</span><span class=\"mtk1\"> = #[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk7\">3</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">updatedTuple</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">myTuple</span><span class=\"mtk1\">.</span><span class=\"mtk11\">with</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">updatedTuple</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// #[1, 4, 3]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">myTuple</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// #[1, 2, 3] (unchanged)</span></span></span></code></pre>\n<p>2단계</p>\n<p>더 보기: <a href=\"https://github.com/tc39/proposal-record-tuple\">https://github.com/tc39/proposal-record-tuple</a></p>\n<h1 id=\"마지막-생각\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%A7%80%EB%A7%89-%EC%83%9D%EA%B0%81\" aria-label=\"마지막 생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마지막 생각</h1>\n<p>2024년 자바스크립트에 제안된 업데이트들은 이 언어를 더욱 강력하고 직관적이며 개발자 친화적으로 만드는 데 있어 중요한 도약을 보여줍니다. Temporal API의 단순함이든 파이프라인 연산자의 효율성이든, 이러한 변경사항들은 지속적인 개선과 혁신에 대한 헌신을 반영합니다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .mtk8 { color: #CE9178; }\n  .default-dark .mtk15 { color: #C586C0; }\n  .default-dark .mtk3 { color: #6A9955; }\n  .default-dark .mtk7 { color: #B5CEA8; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","excerpt":"원문: https://javascript.plainenglish.io/the-5-most-innovative-proposals-for-javascript-planned-for-2024-22139dd2f546  JavaScript Logo 2024 자바스크립트가 빠른 속도로 발전함에 따라 2024년은 이 프로그래밍 언어에 있어 중요한 해가 될 것입니다. 이 글에서는 개발자들이 자바스크립트 코딩에 접근하는 방식을 재정의하기 위한 최신 제안을 자세히 살펴보겠습니다. 이 글이 유용하길 바랍니다! 시작해 봅시다! 목차 데코레이터 Temporal API 파이프라인 연산자 Error cause 레코드와 튜플 1. 데코레이터 자바스크립트에 데코레이터가 도입된 것은 개발자가 클래스, 메서드, 프로퍼티 및 매개변수의 동작을 조작하고 개선할 수 있는 방법이 크게 발전했음을 의미합니다. 파이썬과 타입스크립트와 같은 다른 프로그래밍 언어에서 유래한 데코레이터는 기능을 추가하거나 수정하는 간결하고 선언적인…","frontmatter":{"date":"December 21, 2023","title":"(번역) 2024년 자바스크립트의 5가지 가장 혁신적인 제안","categories":"javascript","author":"soobing"},"fields":{"slug":"/javascript/the-5-most-innovative-proposals-for-javascript-planned-for-2024/"}},"next":{"id":"bba3a1f3-ce86-5073-bc51-efe214981fa7","html":"<p>Next.js나 Remix 같은 프레임워크 내에서 React-Query를 사용한다면, 서버 렌더링 될 때 요청 후 응답받은 데이터를 SPA 방식으로 전환되고 나서도 유지할 수 있을까요? 어떻게 가능할까요? React Query의 <code>hydrate</code>와 <code>dehydrate</code>는 서버에서 미리 가져온 데이터를 클라이언트 사이드에서 재사용 할 수 있게 해줍니다. 이번 글을 통해 서버 렌더링과 어떻게 이를 가능하게 하는지 <code>hydrate</code>와 <code>dehydrate</code>에  대해서 알아봅시다.</p>\n<h2 id=\"server-rendering\" style=\"position:relative;\"><a href=\"#server-rendering\" aria-label=\"server rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Server Rendering</h2>\n<p>서버 렌더링은 사용자가 페이지를 로드하는 즉시 볼 수 있는 초기 HTML을 서버에서 생성하는 행위입니다. 이는 페이지 요청 시 즉시 발생할 수 있으며(SSR), 이전 요청이 캐시 되었거나 빌드 시간에 미리 생성(SSG) 할 수도 있습니다.</p>\n<p>클라이언트 렌더링 애플리케이션에서는 사용자에게 화면에 콘텐츠를 표시하기 전에 최소 3번의 서버 왕복(roundtrips)이 필요합니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"bash\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">1. |-&gt; Markup (내용 없이 - 비어있는 index.html)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">2.   |-&gt; JS</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">3.     |-&gt; Query</span></span></span></code></pre>\n<p>서버 렌더링은 위의 과정을 아래와 같이 같이 변환한다는 것입니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"bash\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">1. |-&gt; Markup (내용이 채워져있고, data가 초기화 되어있음)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">2.   |-&gt; JS</span></span></span></code></pre>\n<p>1번이 완료되면 사용자는 콘텐츠를 볼 수 있고, 2번이 끝나면 페이지가 상호작용 가능하고 클릭할 수 있게 됩니다. 마크업에 필요한 초기 데이터가 포함되어 있기 때문에, 적어도 데이터를 다시 검증할 필요가 있을 때까지는 클라이언트에서 3번을 실행할 필요가 없습니다.</p>\n<p>서버 렌더링을 통해 1번 과정에서 내용이 채워져 있고 data가 초기화되어있는 html을 생성하기 위해서는 마크업을 생성/렌더링 하기 전에 해당 데이터를 미리 가져와야(prefetch) 하며, 데이터를 직렬화 가능한(serializable) 형식으로 dehydrate 시켜 마크업에 포함(embed) 시키고, 클라이언트에서는 React Query 캐시로 해당 데이터를 hydrate 하여 새로운 fetch를 클라이언트에서 추가적으로 할 필요가 없도록 해야 합니다.</p>\n<h2 id=\"initialdata-를-사용하여-서버에서-fetch한-데이터-사용하기\" style=\"position:relative;\"><a href=\"#initialdata-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-fetch%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"initialdata 를 사용하여 서버에서 fetch한 데이터 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>initialData</code> 를 사용하여 서버에서 fetch한 데이터 사용하기</h2>\n<p>React Query의 <code>prefetching</code>과 <code>dehydrate</code>/<code>hydrate</code> API를 전혀 사용하지 않고, useQuery에 raw 데이터를 <code>initialData</code> 옵션으로 전달하는 방법입니다. 이 방법을 이용해서도 서버에서 미리 가져온 데이터를 클라이언트 사이드에서 재사용할 수 있는데요, 어떤 문제점이 있고 왜 Hydration API가 나오게 되었는지 살펴봅시다. Next.js에서 React-Query를 사용한다고 가정해 봅니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Next.js 페이지 라우터 예시</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getServerSideProps</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">posts</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getPosts</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">props:</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">posts</span><span class=\"mtk1\"> } }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Posts</span><span class=\"mtk1\">(</span><span class=\"mtk12\">props</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> } = </span><span class=\"mtk11\">useQuery</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;posts&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getPosts</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">initialData:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">props</span><span class=\"mtk1\">.</span><span class=\"mtk12\">posts</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><code>getStaticProps</code>나 이전의 <code>getInitialProps</code>에서도 잘 작동합니다. 이 방법은 설정은 최소한으로 하고, 일부 경우에는 빠른 해결책이 될 수 있지만, 전체 접근법에 비해 고려해야 할 몇 가지 tradeoff가 있습니다.</p>\n<p>참고: 여기서는 React Query를 사용하되, 데이터를 사전에 가져오기 위해 <code>initialData</code> 옵션을 사용하는 경우를 이야기하고 있음.*</p>\n<ul>\n<li>트리 매우 아래쪽에 있는 컴포넌트에서 <code>useQuery</code>를 호출하는 경우, <code>initialData</code>를 그 지점까지 전달해야 합니다.</li>\n<li>여러 위치에서 동일한 쿼리로 <code>useQuery</code>를 호출하는 경우, <code>initialData</code>를 하나에만 전달하는 것은 앱이 변경될 때 취약하고 문제가 발생할 수 있습니다. <code>initialData</code>와 함께 <code>useQuery</code>를 가진 컴포넌트를 제거하거나 이동하면, 컴포넌트가 다른 컴포넌트 내부에 깊숙이 위치하고 있고, 이런 구조에서 <code>useQuery</code>를 사용한다면, <em>(상위 컴포넌트에서 제공되는 <code>initialData</code>가 중첩된 하위 컴포넌트의 <code>useQuery</code>에 올바르게 전달되지 않아서)</em> 더 이상 데이터를 가지고 있지 않을 수 있습니다. 필요한 모든 쿼리에 <code>initialData</code>를 전달하는 것도 번거로울 수 있습니다.</li>\n<li>서버에서 쿼리가 언제 fetch 되었는지 알 수 없으므로, <code>dataUpdatedAt</code>와 쿼리의 refetching 여부는 페이지가 로드된 시점에 따라 결정됩니다.</li>\n<li>쿼리에 대한 데이터가 캐시에 이미 존재하는 경우에도, <code>initialData</code>는 이 데이터를 결코 덮어쓰지 않습니다. 심지어 새 데이터가 기존 데이터보다 신선하더라도 말입니다.\n<ul>\n<li>왜 특히 더 나쁜지를 이해하려면, 위의 <code>getServerSideProps</code> 예를 고려해 보세요. 페이지를 여러 번 왔다 갔다 하면, 매번 <code>getServerSideProps</code>가 호출되어 새로운 데이터를 가져오지만, <code>initialData</code> 옵션을 사용하기 때문에 클라이언트 캐시와 데이터는 결코 업데이트되지 않습니다.</li>\n</ul>\n</li>\n</ul>\n<p>이러한 단점은 Hydration API를 사용하여 해결할 수 있고, 설정 또한 더욱 간단합니다.</p>\n<h2 id=\"hydration-api-사용하기\" style=\"position:relative;\"><a href=\"#hydration-api-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"hydration api 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://tanstack.com/query/v5/docs/react/guides/ssr#using-the-hydration-apis\">Hydration API</a> 사용하기</h2>\n<p>React Query에서는 <code>dehydrate</code>와 <code>hydrate</code> 함수를 제공하여 이 과정을 간소화합니다. 각 API의 역할과 사용방법 그리고 공식 문서 예시에 대해서 알아보도록 합시다.</p>\n<h3 id=\"hydrate와-dehydrate의-역할\" style=\"position:relative;\"><a href=\"#hydrate%EC%99%80-dehydrate%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"hydrate와 dehydrate의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hydrate와 Dehydrate의 역할</h3>\n<ul>\n<li><code>dehydrate</code>는 서버에서 React Query의 상태를 클라이언트로 전송할 수 있는 형태로 만들기 위해 사용됩니다. 서버에서 데이터를 가져온 후, 이 데이터를 직렬화(serialization) 하여 클라이언트로 전송합니다. 직렬화된 데이터는 <code>DehydratedState</code> 형태로 표현되며, 클라이언트 측에서 <code>hydrate</code> 함수를 통해 다시 React Query 상태로 변환됩니다.</li>\n<li><code>hydrate</code>는 클라이언트 측에서 직렬화된 상태를 받아 이를 React Query의 상태로 변환합니다. 이 과정은 서버에서 미리 가져온 데이터를 클라이언트의 쿼리 캐시에 적용하여, 네트워크 요청 없이 데이터를 사용할 수 있게 합니다.</li>\n</ul>\n<h3 id=\"사용방법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"사용방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용방법</h3>\n<ol>\n<li>프레임워크 로더 함수에서 <code>const queryClient = new QueryClient(options)</code>를 생성합니다.</li>\n<li>앱 로더 함수에서, 미리 가져오고 싶은 각 쿼리에 대해 <code>await queryClient.prefetchQuery(...)</code>를 실행합니다.\n<ul>\n<li>가능하면 <code>await Promise.all(...)</code>을 사용해 쿼리들을 병렬로 가져옵니다.</li>\n<li>미리 가져오지 않은 쿼리들이 있어도 괜찮습니다. 이 쿼리들은 서버에서 렌더링 되지 않고, 애플리케이션이 상호작용할 수 있게 된 후 클라이언트에서 가져옵니다. 이는 사용자 상호작용 후에만 표시되거나 또는 페이지 하단에 있어 더 중요한 콘텐츠의 로딩을 방해하지 않기 위해 사용됩니다.</li>\n</ul>\n</li>\n<li>로더에서 <code>dehydrate(queryClient)</code>를 반환합니다. 이 반환 구문의 정확한 문법은 프레임워크에 따라 다를 수 있습니다.</li>\n<li><code>&#x3C;HydrationBoundary state={dehydratedState}></code>로 트리를 감싸는데, <code>dehydratedState</code>는 프레임워크 로더에서 옵니다. <code>dehydratedState</code>를 얻는 방법도 프레임워크에 따라 다릅니다.\n<ul>\n<li>이 작업은 각 라우트마다 수행하거나, 애플리케이션 최상단에서 수행하여 보일러플레이트를 줄일 수 있습니다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"nextjs에서-예시\" style=\"position:relative;\"><a href=\"#nextjs%EC%97%90%EC%84%9C-%EC%98%88%EC%8B%9C\" aria-label=\"nextjs에서 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://tanstack.com/query/v5/docs/react/guides/ssr#full-nextjs-pages-router-example\">Next.js에서 예시</a></h3>\n<ul>\n<li>\n<p>초기 세팅(앱 로더 함수)</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// _app.tsx</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">QueryClient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">QueryClientProvider</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;@tanstack/react-query&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk15\">default</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MyApp</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">Component</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pageProps</span><span class=\"mtk1\"> }) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">React</span><span class=\"mtk1\">.</span><span class=\"mtk11\">useState</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    () </span><span class=\"mtk4\">=&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">QueryClient</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">defaultOptions:</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk12\">queries:</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// SSR에서는 클라이언트에서 즉시 재요청하는 것을 피하기 위해,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// default staleTime을 0보다 높게 설정하는 것이 일반적입니다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">staleTime:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">60</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1000</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">QueryClientProvider</span><span class=\"mtk1\"> </span><span class=\"mtk12\">client</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk12\">queryClient</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">Component</span><span class=\"mtk1\"> </span><span class=\"mtk4\">{</span><span class=\"mtk1\">...</span><span class=\"mtk12\">pageProps</span><span class=\"mtk4\">}</span><span class=\"mtk1\"> </span><span class=\"mtk17\">/&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;/</span><span class=\"mtk10\">QueryClientProvider</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n</li>\n<li>\n<p>각 라우터에서</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// pages/posts.jsx</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">dehydrate</span><span class=\"mtk1\">, </span><span class=\"mtk12\">HydrationBoundary</span><span class=\"mtk1\">, </span><span class=\"mtk12\">QueryClient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">useQuery</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;@tanstack/react-query&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 이것은 getServerSideProps에서도 동일할 수 있습니다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getStaticProps</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">QueryClient</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prefetchQuery</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;posts&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getPosts</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">props:</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">dehydratedState:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">dehydrate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Posts</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// useQuery는 &lt;PostsRoute&gt;의 더 깊은 자식에서도 마찬가지로 사용될 수 있으며,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 어느 방식이든 데이터는 즉시 사용 가능합니다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> } = </span><span class=\"mtk11\">useQuery</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;posts&#39;</span><span class=\"mtk1\">], </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getPosts</span><span class=\"mtk1\"> })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 이 쿼리는 서버에서 미리 가져오지 않았으며, 클라이언트에서 시작될 때까지 요청하지 않을 것입니다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 이 두 가지 패턴을 혼합해서 사용하는 것은 문제가 없습니다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">data</span><span class=\"mtk1\">: </span><span class=\"mtk12\">commentsData</span><span class=\"mtk1\"> } = </span><span class=\"mtk11\">useQuery</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;posts-comments&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getComments</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk15\">default</span><span class=\"mtk1\"> </span><span class=\"mtk11\">PostsRoute</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">dehydratedState</span><span class=\"mtk1\"> }) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    &lt;</span><span class=\"mtk12\">HydrationBoundary</span><span class=\"mtk1\"> </span><span class=\"mtk12\">state</span><span class=\"mtk1\">={</span><span class=\"mtk12\">dehydratedState</span><span class=\"mtk1\">}&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      &lt;</span><span class=\"mtk12\">Posts</span><span class=\"mtk1\"> /&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    &lt;/</span><span class=\"mtk12\">HydrationBoundary</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n</li>\n<li>\n<p>팁1) 보일러 플레이트를 없애기 위한 예시</p>\n<ul>\n<li>\n<p>모든 라우트에 이 부분을 포함하는 것은 상당한 보일러 플레이트처럼 보일 수 있습니다. 이 방법에 문제가 있는 것은 아니지만, 이 보일러 플레이트를 제거하고 싶다면, Next.js에서 설정을 다음과 같이 수정할 수 있습니다.</p>\n</li>\n<li>\n<p>AS-IS (보일러 플레이트 없애기 전)</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk15\">default</span><span class=\"mtk1\"> </span><span class=\"mtk11\">PostsRoute</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">dehydratedState</span><span class=\"mtk1\"> }) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    &lt;</span><span class=\"mtk12\">HydrationBoundary</span><span class=\"mtk1\"> </span><span class=\"mtk12\">state</span><span class=\"mtk1\">={</span><span class=\"mtk12\">dehydratedState</span><span class=\"mtk1\">}&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      &lt;</span><span class=\"mtk12\">Posts</span><span class=\"mtk1\"> /&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    &lt;/</span><span class=\"mtk12\">HydrationBoundary</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n</li>\n<li>\n<p>TO-BE (보일러 플레이트 없앤 후)</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// _app.tsx</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">HydrationBoundary</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">QueryClient</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">QueryClientProvider</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;@tanstack/react-query&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk15\">default</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MyApp</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">Component</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pageProps</span><span class=\"mtk1\"> }) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">React</span><span class=\"mtk1\">.</span><span class=\"mtk11\">useState</span><span class=\"mtk1\">(() </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">QueryClient</span><span class=\"mtk1\">())</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">QueryClientProvider</span><span class=\"mtk1\"> </span><span class=\"mtk12\">client</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk12\">queryClient</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">HydrationBoundary</span><span class=\"mtk1\"> </span><span class=\"mtk12\">state</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk12\">pageProps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">dehydratedState</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">Component</span><span class=\"mtk1\"> </span><span class=\"mtk4\">{</span><span class=\"mtk1\">...</span><span class=\"mtk12\">pageProps</span><span class=\"mtk4\">}</span><span class=\"mtk1\"> </span><span class=\"mtk17\">/&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&lt;/</span><span class=\"mtk10\">HydrationBoundary</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;/</span><span class=\"mtk10\">QueryClientProvider</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// pages/posts.tsx</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// HydrationBoundary를 포함한 PostsRoute를 제거하고 대신 Posts를 직접 내보냅니다:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk15\">default</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Posts</span><span class=\"mtk1\">() { ... }</span></span></span></code></pre>\n</li>\n<li>\n<p>팁2) 서버에서 조건부 prefetch 하는 방법</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getServerSideProps</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">QueryClient</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fetchQuery</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;user&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">email</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getUserByEmail</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">user</span><span class=\"mtk1\">?.</span><span class=\"mtk12\">userId</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prefetchQuery</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;projects&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">userId</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getProjectsByUser</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">props:</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">dehydratedState:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">dehydrate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\">) } }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<ul>\n<li>\n<p>참고 - 클라이언트에서 조건부 fetch 하는법 (<code>enabled</code> 이용하기)</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 사용자 가져오기</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">data</span><span class=\"mtk1\">: </span><span class=\"mtk12\">user</span><span class=\"mtk1\"> } = </span><span class=\"mtk11\">useQuery</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;user&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">email</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getUserByEmail</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">userId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">user</span><span class=\"mtk1\">?.</span><span class=\"mtk12\">id</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 그 다음 사용자의 프로젝트 가져오기</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">status</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">fetchStatus</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">data</span><span class=\"mtk1\">: </span><span class=\"mtk12\">projects</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} = </span><span class=\"mtk11\">useQuery</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;projects&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">userId</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getProjectsByUser</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// userId가 존재할 때까지 쿼리는 실행되지 않음</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">enabled:</span><span class=\"mtk1\"> !!</span><span class=\"mtk12\">userId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">})</span></span></span></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"기타-참고사항\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%EC%B0%B8%EA%B3%A0%EC%82%AC%ED%95%AD\" aria-label=\"기타 참고사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 참고사항</h2>\n<ul>\n<li>서버와 클라이언트 간 시간 동기화: <code>staleTime</code> 설정은 서버에서 데이터를 가져온 시점을 기준으로 합니다. 서버의 시간 설정이 정확해야 올바르게 작동합니다.</li>\n<li>메모리 관리: 각 요청마다 새로운 <code>QueryClient</code>를 생성하는 경우, 서버의 메모리 사용량이 증가할 수 있습니다. 적절한 가비지 컬렉션 설정이 필요합니다.</li>\n<li>코드 분할과 요청 워터폴: 코드 분할을 사용하는 경우, 데이터 가져오기 코드를 메인 번들에 포함시킬지, 코드 분할된 번들에 넣을지 결정해야 합니다. 이는 성능과 요청 워터폴에 영향을 미칩니다.</li>\n</ul>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>React Query의 <code>hydrate</code>와 <code>dehydrate</code>는 서버 사이드 렌더링을 구현하는 데 있어 필수적인 도구입니다. 이들은 데이터를 효과적으로 전달하고, 애플리케이션의 성능을 최적화하는 데 중요한 역할을 합니다. 그러나 이 기능들을 사용할 때는 데이터의 필요성, 네트워크 오버헤드, 그리고 서버와 클라이언트 간의 일관성을 고려해야 합니다. 이를 통해 효율적이고 사용자 친화적인 SSR 경험을 구축할 수 있습니다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk3 { color: #6A9955; }\n  .default-dark .mtk15 { color: #C586C0; }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk8 { color: #CE9178; }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .mtk7 { color: #B5CEA8; }\n  .default-dark .mtk17 { color: #808080; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"date":"December 10, 2023","title":"[React-Query] 서버에서 prefetching 한 데이터 사용하기","categories":"react","author":"soobing"},"fields":{"slug":"/react/server-rendering-and-react-query/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://soobing.github.io","comments":{"utterances":{"repo":"soobing/soobing.github.io"}}}}},"pageContext":{"slug":"/javascript/the-5-most-innovative-proposals-for-javascript-planned-for-2024/","nextSlug":"/react/server-rendering-and-react-query/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","2938748437"]}