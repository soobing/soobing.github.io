{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/react/introducing-signals/",
    "result": {"data":{"cur":{"id":"9df0e48d-8ada-5cfe-a748-f21662d20e9a","html":"<blockquote>\n<p>원문: <a href=\"https://preactjs.com/blog/introducing-signals/\">https://preactjs.com/blog/introducing-signals/</a></p>\n</blockquote>\n<p><em>시그널은 앱이 복잡해져도 빠른 속도를 유지하도록 하는 상태 표현 방식입니다. 시그널은 반응형 원칙에 기반을 두고 있으며, 가상 돔에 최적화된 독특한 구현을 통해 개발자에게 훌륭한 경험을 제공합니다.</em></p>\n<p>본질적으로 시그널은 특정 값을 가지고 있는 <code>.value</code> 속성을 가진 객체입니다. 컴포넌트 내에서 시그널의 value 속성에 접근하면, 그 시그널의 값이 변경될 때 해당 컴포넌트가 자동으로 업데이트됩니다.</p>\n<p>이는 간단하고 작성하기 쉬울 뿐만 아니라, 앱이 얼마나 많은 컴포넌트를 가지고 있든 상태 업데이트가 빠르게 유지되도록 보장합니다. 시그널은 기본적으로 빠르며, 백그라운드에서 자동으로 업데이트를 최적화해줍니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">signal</span><span class=\"mtk1\">, </span><span class=\"mtk12\">computed</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;@preact/signals&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">count</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">signal</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">double</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">computed</span><span class=\"mtk1\">(() </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">count</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Counter</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">button</span><span class=\"mtk1\"> </span><span class=\"mtk12\">onClick</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk1\">() </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">count</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">++</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">{</span><span class=\"mtk12\">count</span><span class=\"mtk4\">}</span><span class=\"mtk1\"> x 2 = </span><span class=\"mtk4\">{</span><span class=\"mtk12\">double</span><span class=\"mtk4\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;/</span><span class=\"mtk4\">button</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://preactjs.com/repl?code=import%20%7B%20render%20%7D%20from%20%22preact%22%3B%0A%0Aimport%20%7B%20signal%2C%20computed%20%7D%20from%20%22%40preact%2Fsignals%22%3B%0A%0Aconst%20count%20%3D%20signal(0)%3B%0Aconst%20double%20%3D%20computed(()%20%3D%3E%20count.value%20*%202)%3B%0A%0Afunction%20Counter()%20%7B%0A%20%20return%20(%0A%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20count.value%2B%2B%7D%3E%0A%20%20%20%20%20%20%7Bcount%7D%20x%202%20%3D%20%7Bdouble%7D%0A%20%20%20%20%3C%2Fbutton%3E%0A%20%20)%3B%0A%7D%0A%0Arender(%3CCounter%20%2F%3E%2C%20document.getElementById(%22app%22))%3B%0A\"><em>REPL에서 실행</em></a></p>\n<p>시그널은 훅과 달리 컴포넌트 내부 또는 외부에서 사용할 수 있습니다. 또한 시그널은 훅과 클래스 컴포넌트 <strong>모두</strong>에서 훌륭하게 작동하므로, 기존 지식을 활용하며 자신의 속도에 맞게 시그널을 도입할 수 있습니다. 몇몇 컴포넌트에서 시그널을 시도해보고 점진적으로 채택해보세요.</p>\n<p>아 그리고, 저희는 가능한 한 작은 라이브러리를 제공한다는 기본적인 철학에 충실하고 있습니다. Preact에서 시그널을 사용하더라도 번들 크기는 단 <strong>1.6kB</strong>만 증가합니다.</p>\n<p>당장 사용해보고 싶나요? 그렇다면 저희 <a href=\"https://preactjs.com/guide/v10/signals\">문서</a>를 읽고 시그널에 대해서 깊이 알아보세요.</p>\n<h2 id=\"시그널은-어떤-문제를-해결했나요\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EA%B7%B8%EB%84%90%EC%9D%80-%EC%96%B4%EB%96%A4-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%96%88%EB%82%98%EC%9A%94\" aria-label=\"시그널은 어떤 문제를 해결했나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시그널은 어떤 문제를 해결했나요?</h2>\n<p>지난 몇 년 동안, 저희는 소규모 스타트업부터 수백 명의 개발자가 동시에 커밋하는 거대 기업에 이르기까지 다양한 앱 그리고 팀과 협력해 왔습니다. 이 기간 동안, 코어 팀의 모든 구성원은 애플리케이션 상태 관리 방식에 반복되는 문제가 있음을 발견했습니다.</p>\n<p>이러한 문제를 해결하기 위한 뛰어난 솔루션들이 만들어졌지만, 최고의 솔루션 조차도 여전히 프레임워크에 수동으로 통합(integration)해야 한다는 단점이 있었습니다. 그 결과, 개발자들은 이러한 솔루션들을 채택하는 데 주저함을 보였고, 대신 프레임워크에서 제공하는 상태 기본 요소들을 사용하여 구축하는 것을 선호했습니다.</p>\n<p>우리는 최적의 성능과 개발자 사용성을 결합하여 프레임워크와의 원활한 통합까지 갖추고 있는 매력적인 솔루션을 제공하고자 했습니다.</p>\n<h2 id=\"전역-상태에-대한-고민\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD-%EC%83%81%ED%83%9C%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B3%A0%EB%AF%BC\" aria-label=\"전역 상태에 대한 고민 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역 상태에 대한 고민</h2>\n<p>애플리케이션 상태는 일반적으로 작고 단순하며, 아마 몇 개의 간단한 <code>useState</code> 훅을 사용하는 것으로 시작됩니다. 앱이 커지고 더 많은 컴포넌트들이 동일한 상태에 접근할 필요가 생기면, 결국 그 상태는 공통의 부모 컴포넌트로 옮겨집니다. 이 패턴은 대부분의 상태가 컴포넌트 트리의 루트에 가깝게 관리될 때까지 여러 번 반복됩니다.</p>\n<p><img src=\"https://preactjs.com/assets/signals/state-updates.png\" alt=\"\"></p>\n<p>이 시나리오는 상태 무효화(invalidation)의 영향을 받는 전체 트리를 업데이트해야 하기 때문에 기존 가상 돔 기반 프레임워크에 도전 과제를 제시합니다. 본질적으로, 렌더링 성능은 그 트리에 있는 컴포넌트 수에 영향을 받습니다. 프레임 워크가 동일한 객체를 수신하도록 <code>memo</code>나 <code>useMemo</code>를 사용하여 컴포넌트 트리의 일부를 메모하여 이 문제를 해결할 수 있습니다. 변경된 사항이 없으면, 프레임워크가 트리의 일부 렌더링을 건너뛸 수 있습니다.</p>\n<p>이론적으로는 합리적으로 들리지만, 현실은 훨씬 더 혼란스러운 경우가 많습니다. 실제로, 코드베이스가 커짐에 따라 이러한 최적화를 어디에 적용해야 할지 어려워집니다. 종종, 좋은 의도의 메모이제이션조차도 불안정한 의존성 값으로 인해 비효율적인 경우가 있습니다. 훅은 분석할 수 있는 명시적인 의존성 트리를 가지고 있지 않기 때문에, 도구를 사용하여 개발자가 <em><strong>왜</strong></em> 의존성이 불안정한지 진단하는 데 도움을 주지 못합니다.</p>\n<h2 id=\"혼돈의-컨텍스트\" style=\"position:relative;\"><a href=\"#%ED%98%BC%EB%8F%88%EC%9D%98-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\" aria-label=\"혼돈의 컨텍스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>혼돈의 컨텍스트</h2>\n<p>상태 공유를 위해 팀들이 자주 사용하는 또 다른 일반적인 해결책은 상태를 컨텍스트에 넣는 것입니다. 이 방법은 컨텍스트 제공자(context provider)와 소비자(consumers) 사이의 컴포넌트들에 대한 렌더링을 건너뛰는 것을 가능하게 함으로써 불필요한 렌더링을 방지할 수 있습니다. 하지만 문제가 있습니다. 컨텍스트 제공자에게 전달된 값만 업데이트할 수 있고, 전체적으로만 업데이트 할 수 있습니다. 컨텍스트를 통해 노출된 객체의 속성을 업데이트해도 그 컨텍스트의 소비자들은 업데이트되지 않습니다. 즉, 세밀한 업데이트가 불가능합니다. 이를 처리하기 위해 사용할 수 있는 옵션들은 상태를 여러 컨텍스트로 나누거나, 그 속성 중 하나라도 변경될 때마다 컨텍스트 객체를 복제하여 과도하게 무효화하는 것입니다.</p>\n<p><img src=\"https://preactjs.com/assets/signals/context-chaos.png\" alt=\"\"></p>\n<p>컨텍스트로 값을 이동시키는 것이 처음에는 유리한 선택처럼 보일 수 있지만, 단지 값을 공유하기 위해 컴포넌트 트리의 크기를 증가시키는 것은 결국 문제가 됩니다. 비즈니스 로직은 필연적으로 여러 컨텍스트 값에 따라 달라지며, 이로 인해 트리의 특정 위치에 로직이 구현되도록 강제할 수 있습니다. 트리 중간에 컨텍스트를 구독하는 컴포넌트를 추가하면 컨텍스트를 업데이트할 때 건너뛸 수 있는 컴포넌트의 수가 줄어들기 때문에 비용이 많이 듭니다. 게다가 구독자 아래에 있는 모든 컴포넌트는 이제 다시 렌더링되어야 합니다. 이 문제에 대한 유일한 해결책은 메모이제이션을 열심히 적용하는 것인데, 이는 메모이제이션의 본질적인 문제가 우리를 다시 원점으로 돌려 놓습니다.</p>\n<h2 id=\"더-나은-상태-관리-방법에-대한-연구\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EB%82%98%EC%9D%80-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%B0%A9%EB%B2%95%EC%97%90-%EB%8C%80%ED%95%9C-%EC%97%B0%EA%B5%AC\" aria-label=\"더 나은 상태 관리 방법에 대한 연구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 나은 상태 관리 방법에 대한 연구</h2>\n<p>우리는 차세대 상태 기본 요소(primitive)를 찾기 위해 다시 처음으로 돌아갔습니다. 우리는 현재 솔루션들의 문제점을 동시에 해결할 수 있는 무언가를 만들고 싶었습니다. 수동 프레임워크 통합, 메모이제이션에 대한 과도한 의존, 최적화 되지 않은 컨텍스트의 사용, 프로그래밍적으로 관찰하기에 어렵다는 점이 문제로 느껴졌습니다.</p>\n<p>개발자들은 이러한 전략(메모이제이션, 컨텍스트 최적화 등)을 통해 성능을 향상시키기 위해 추가적인 노력을 기울여야 합니다. 만약 우리가 이 접근법을 전환하여 <strong>기본적으로 빠른</strong> 시스템을 제공할 수 있다면 어떨까요? 성능 최적화가 기본적으로 내장된 시스템을 만들 수 있다면요?</p>\n<p>이러한 질문에 대한 답은 시그널 입니다. 앱 전반에 걸쳐 메모이제이션이나 트릭을 요구하지 않는 기본적으로 빠른 시스템 입니다. 시그널은 상태가 전역적이거나, props나 컨텍스트를 통해 전달되거나, 컴포넌트 내부에 국한되었는지와 상관없이 세밀한 상태 업데이트의 이점을 제공합니다.</p>\n<h2 id=\"미래를-향한-시그널\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%EB%9E%98%EB%A5%BC-%ED%96%A5%ED%95%9C-%EC%8B%9C%EA%B7%B8%EB%84%90\" aria-label=\"미래를 향한 시그널 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미래를 향한 시그널</h2>\n<p>시그널의 주요 아이디어는 컴포넌트 트리를 통해 값을 직접 전달하는 대신, 값이 포함된 시그널 객체(<code>ref</code>와 유사)를 전달하는 것입니다. 시그널의 값이 변경되어도 시그널 자체는 그대로 유지됩니다. 결과적으로 컴포넌트는 시그널의 값이 아니라 시그널을 보고 있기 때문에 구독한 컴포넌트들을 다시 렌더링하지 않고도 시그널을 업데이트할 수 있습니다. 이를 통해 컴포넌트들을 렌더링하는 비용이 많이 드는 작업을 모두 건너뛰고 실제로 시그널의 값에 접근하는 컴포넌트로 바로 이동할 수 있습니다.</p>\n<p><img src=\"https://preactjs.com/assets/signals/signals-update.png\" alt=\"\"></p>\n<p>우리는 애플리케이션의 상태 그래프가 일반적으로 컴포넌트 트리보다 훨신 간단하다는 사실을 활용하고 있습니다. 상태 그래프를 업데이트하는 데 필요한 작업이 컴포넌트 트리를 업데이트하는 것보다 훨씬 적기 때문에 렌더링이 더 빨라집니다. 이 차이는 브라우저에서 측정할 때 가장 명확하게 드러납니다. 아래 스크린샷은 동일한 앱에 대해 두 번 측정된 DevTools 프로파일 추적을 보여줍니다. 한 번은 상태 기본 요소로 훅을 사용하여 측정하고 다른 한 번은 시그널을 사용하였습니다.</p>\n<p><img src=\"https://preactjs.com/assets/signals/virtual-dom-vs-signals-update.png\" alt=\"\"></p>\n<p>시그널 버전은 전통적인 가상 돔 기반 프레임워크의 업데이트 메커니즘보다 성능이 훨씬 뛰어납니다. 우리가 테스트한 일부 앱에서는 시그널이 너무 빨라 *플레임그래프(flamegraph)에서 찾기가 어려울 정도입니다.</p>\n<p>시그널은 성능에 관한 관점을 완전히 뒤집어 놓습니다. 메모이제이션 또는 셀렉터를 통한 성능 최적화 대신, 시그널은 기본적으로 빠릅니다. 시그널을 사용하면, 성능 최적화가 기본적으로 활성화되어 있으며 최적화를 하지 않고자 할 때는 별도의 조치(시그널을 사용하지 않음)를 취해야 합니다.</p>\n<p>이러한 수준의 성능을 내기 위해, 시그널은 다음과 같은 핵심 원칙들을 바탕으로 구축되었습니다.</p>\n<ul>\n<li><strong>기본적으로 지연 처리:</strong> 현재 어딘가에서 사용되는 시그널만 관찰되고 업데이트되며, 연결되지 않은 시그널은 성능에 영향을 미치지 않습니다.</li>\n<li><strong>최적의 업데이트:</strong> 시그널의 값이 변하지 않았다면, 해당 시그널의 값을 사용하는 컴포넌트와 effect는 시그널의 의존성이 변경되었더라도 업데이트되지 않습니다.</li>\n<li><strong>최적의 의존성 추적:</strong> 프레임워크는 모든 것이 의존하는 시그널을 대신 추적해줍니다. 훅과 같은 의존성 배열이 필요하지 않습니다.</li>\n<li><strong>직접 접근:</strong> 컴포넌트에서 시그널의 값을 접근하는 것만으로도 셀렉터나 훅 없이 자동으로 업데이트를 구독하게 됩니다.</li>\n</ul>\n<p>이러한 원칙들은 시그널을 광범위한 사용 사례, 심지어 UI 렌더링과 관련없는 시나리오에도 적합하게 만듭니다.</p>\n<p><em>* 역자주: Flamegraph는 소프트웨어 성능 분석 도구 중 하나로, 프로그램의 실행 시간 동안 발생하는 다양한 함수 호출과 그 실행 시간을 시각화하는 그래프입니다.</em></p>\n<h2 id=\"preact에-시그널-가져오기\" style=\"position:relative;\"><a href=\"#preact%EC%97%90-%EC%8B%9C%EA%B7%B8%EB%84%90-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\" aria-label=\"preact에 시그널 가져오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preact에 시그널 가져오기</h2>\n<p>올바른 상태 기본 요소를 확인한 후, 우리는 그것을 Preact에 연결하기 시작했습니다. 우리가 항상 훅을 좋아하는 이유는 컴포넌트 내에서 직접 사용할 수 있다는 점입니다. 이는 “셀렉터” 함수에 의존하거나 컴포넌트를 특별한 함수로 감싸서 상태 업데이트를 구독하는 것과 같은 써드 파티 상태 관리 솔루션들에 비해 사용성이 우수하다는 장점이 있습니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 셀렉터 기반 구독 :(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Counter</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">value</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">useSelector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">state</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">count</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 래퍼 함수 기반 구독 :(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">counterState</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Counter</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Counter</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">observe</span><span class=\"mtk1\">(</span><span class=\"mtk12\">props</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">value</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">counterState</span><span class=\"mtk1\">.</span><span class=\"mtk12\">count</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">});</span></span></span></code></pre>\n<p>두 가지 접근 방식 모두 우리에게 만족스럽지 않았습니다. 셀렉터 접근 방식은 모든 상태 접근을 셀렉터로 감싸야 하며, 이는 복잡하거나 중첩된 상태에서는 번거로워집니다. 컴포넌트를 함수로 감싸는 방식은 컴포넌트를 수동으로 감싸야 하는 노력이 필요하며, 이는 컴포넌트 이름과 정적 프로퍼티가 누락되는 등의 여러 문제를 가져옵니다.</p>\n<p>지난 몇 년 동안 우리는 많은 개발자들과 긴밀하게 협력할 기회를 가졌습니다. 특히 (P)react를 처음 접하는 사람들의 일반적인 어려움 중 하나는 셀렉터나 래퍼와 같은 개념들이 추가적인 패러다임으로 여겨져, 각 상태 관리 솔루션의 생산성을 느껴보기 전에 이러한 개념들을 먼저 배워야 하는 부담이 있습니다.</p>\n<p>이상적으로는 셀렉터나 래퍼 함수에 대해 알 필요 없으며 단순히 컴포넌트 내에서 직접 상태에 접근할 수 있습니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 이것이 전역 상태이고 전체 앱에서 이에 접근해야 하는 상황을 상상해보세요.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">count</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Counter</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">button</span><span class=\"mtk1\"> </span><span class=\"mtk12\">onClick</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk1\">() </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">count</span><span class=\"mtk1\">++</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     value: </span><span class=\"mtk4\">{</span><span class=\"mtk12\">count</span><span class=\"mtk4\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk17\">&lt;/</span><span class=\"mtk4\">button</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>코드는 명확하고 이해하기 쉽지만, 불행히도 작동하지 않습니다. 버튼을 클릭할 때 컴포넌트가 업데이트되지 않는데, 이는 <code>count</code>가 변경되었다는 것을 알 수 있는 방법이 없기 때문입니다.</p>\n<p>하지만 우리는 이 시나리오를 머릿속에서 지울 수 없었습니다. 이렇게 명확한 모델을 현실로 만들기 위해 우리는 무엇을 할 수 있을까요? 우리는 Preact의 <a href=\"https://preactjs.com/guide/v10/options\">pluggable 렌더러</a>를 사용하여 다양한 아이디어와 구현 방법을 프로토타이핑 해보기 시작했습니다. 시간이 걸렸지만, 결국 그것을 실현시킬 수 있는 방법을 찾아냈습니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 이것이 전역 상태이고 전체 앱에서 이에 접근해야 하는 상황을 상상해보세요.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">count</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">signal</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Counter</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">button</span><span class=\"mtk1\"> </span><span class=\"mtk12\">onClick</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk1\">() </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">count</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">++</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     Value: </span><span class=\"mtk4\">{</span><span class=\"mtk12\">count</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk4\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk17\">&lt;/</span><span class=\"mtk4\">button</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span></code></pre>\n<p><a href=\"https://preactjs.com/repl?code=import%20%7B%20render%20%7D%20from%20%22preact%22%3B%0Aimport%20%7B%20signal%20%7D%20from%20%22%40preact%2Fsignals%22%3B%0A%0A%2F%2F%20Imagine%20this%20is%20some%20global%20state%20that%20the%20whole%20app%20needs%20access%20to%3A%0Aconst%20count%20%3D%20signal(0)%3B%0A%0Afunction%20Counter()%20%7B%0A%20return%20(%0A%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20count.value%2B%2B%7D%3E%0A%20%20%20%20%20Value%3A%20%7Bcount.value%7D%0A%20%20%20%3C%2Fbutton%3E%0A%20)%3B%0A%7D%0A%0Arender(%3CCounter%20%2F%3E%2C%20document.getElementById(%22app%22))%3B%0A\"><em>REPL에서 실행</em></a></p>\n<p>셀렉터도, 래퍼 함수도, 아무 것도 없습니다. 시그널의 값에 접근하는 것만으로도 컴포넌트가 해당 시그널의 값이 변경될 때 업데이트해야 한다는 것을 알 수 있습니다. 몇몇 앱에서 프로토타입을 테스트해본 후, 우리는 무언가를 해냈다는 것이 분명해졌습니다. 이런 방식으로 코드를 작성하는 것은 직관적이었고, 최적의 상태로 작동시키기 위해 복잡한 생각을 할 필요가 없었습니다.</p>\n<h2 id=\"더-빠르게-할-수-있을까요\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C%EC%9A%94\" aria-label=\"더 빠르게 할 수 있을까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 빠르게 할 수 있을까요?</h2>\n<p>여기서 멈출 수도 있었고, 시그널을 그대로 출시할 수도 있었지만, 우리는 Preact 팀입니다. 우리는 Preact 통합을 얼마나 더 밀어붙일 수 있는지 보고 싶었습니다. 위의 카운터 예제에서, <code>count</code>의 값은 텍스트를 표시하는 데만 사용되는데, 이것이 전체 컴포넌트를 다시 렌더링할 필요는 정말 없어야 합니다. 시그널의 값이 변경될 때 자동으로 컴포넌트를 리렌더링하는 대신, 텍스트만 다시 렌더링하는 것은 어떨까요? 더 나아가, 가상 돔을 완전히 우회하여 텍스트를 돔에서 직접 업데이트한다면 어떨까요?</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"jsx\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">count</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">signal</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 아래처럼 하지 않고</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">p</span><span class=\"mtk17\">&gt;</span><span class=\"mtk1\">Value: </span><span class=\"mtk4\">{</span><span class=\"mtk12\">count</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&lt;/</span><span class=\"mtk4\">p</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// … 우리는 시그널을 직접 JSX에 전달할 수 있습니다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">p</span><span class=\"mtk17\">&gt;</span><span class=\"mtk1\">Value: </span><span class=\"mtk4\">{</span><span class=\"mtk12\">count</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&lt;/</span><span class=\"mtk4\">p</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// … 또는 돔 속성으로도 전달할 수 있습니다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">input</span><span class=\"mtk1\"> </span><span class=\"mtk12\">value</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk12\">count</span><span class=\"mtk4\">}</span><span class=\"mtk1\"> </span><span class=\"mtk12\">onInput</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk1\">...</span><span class=\"mtk4\">}</span><span class=\"mtk1\"> </span><span class=\"mtk17\">/&gt;</span></span></span></code></pre>\n<p>그래서, 네. 그렇게 했습니다. 문자열을 일반적으로 사용하는 어떤 곳이든 JSX에 직접 시그널을 전달할 수 있습니다. 시그널의 값은 텍스트로 렌더링되며, 시그널이 변경될 때 자동으로 스스로를 업데이트합니다. 이는 props에도 적용됩니다</p>\n<h2 id=\"다음-스텝\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%9D%8C-%EC%8A%A4%ED%85%9D\" aria-label=\"다음 스텝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다음 스텝</h2>\n<p>궁금하고 바로 시작해보시려면, 시그널 <a href=\"https://preactjs.com/guide/v10/signals\">문서</a>를 확인해보세요. 여러분이 어떻게 사용할지 듣고 싶습니다.</p>\n<p>시그널로 전환하는 것에 서두를 필요는 없다는 것을 기억하세요. 훅은 계속 지원될 것이며, 시그널과 함께 사용해도 훌륭하게 작동합니다! 개념에 익숙해지기 위해 몇 개의 컴포넌트로 시작하여 시그널을 점진적으로 시도해보는 것을 추천합니다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk15 { color: #C586C0; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk8 { color: #CE9178; }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk7 { color: #B5CEA8; }\n  .default-dark .mtk17 { color: #808080; }\n  .default-dark .mtk3 { color: #6A9955; }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","excerpt":"원문: https://preactjs.com/blog/introducing-signals/ 시그널은 앱이 복잡해져도 빠른 속도를 유지하도록 하는 상태 표현 방식입니다. 시그널은 반응형 원칙에 기반을 두고 있으며, 가상 돔에 최적화된 독특한 구현을 통해 개발자에게 훌륭한 경험을 제공합니다. 본질적으로 시그널은 특정 값을 가지고 있는 .value 속성을 가진 객체입니다. 컴포넌트 내에서 시그널의 value 속성에 접근하면, 그 시그널의 값이 변경될 때 해당 컴포넌트가 자동으로 업데이트됩니다. 이는 간단하고 작성하기 쉬울 뿐만 아니라, 앱이 얼마나 많은 컴포넌트를 가지고 있든 상태 업데이트가 빠르게 유지되도록 보장합니다. 시그널은 기본적으로 빠르며, 백그라운드에서 자동으로 업데이트를 최적화해줍니다. REPL에서 실행 시그널은 훅과 달리 컴포넌트 내부 또는 외부에서 사용할 수 있습니다. 또한 시그널은 훅과 클래스 컴포넌트 모두에서 훌륭하게 작동하므로, 기존 지식을 활용하며 자신의 속도에 …","frontmatter":{"date":"November 27, 2023","title":"(번역) 시그널(Signal)에 대한 소개","categories":"react","author":"soobing"},"fields":{"slug":"/react/introducing-signals/"}},"next":{"id":"66c25313-1b77-58b7-a6b6-bd128abe4cd4","html":"<blockquote>\n<p>원글: <a href=\"https://itnext.io/decoupling-ui-and-logic-in-react-a-clean-code-approach-with-headless-components-82e46b5820c\">https://itnext.io/decoupling-ui-and-logic-in-react-a-clean-code-approach-with-headless-components-82e46b5820c</a></p>\n</blockquote>\n<p>프런트엔드 개발 영역에서는 용어와 패러다임이 때로는 이해하기 어려울 수 있으며 ‘헤드리스 UI’ 또는 ‘헤드리스 컴포넌트’도 이 범주에 속할 수 있습니다. 이러한 용어들이 무엇을 의미하는지 궁금해서 고개를 갸웃거리고, 혼자만 그런 것이 아닙니다. 사실, 혼란스러운 <code>이름</code>에도 불구하고 이러한 개념들은 복잡한 사용자 인터페이스 관리를 상당히 단순화할 수 있는 매력적인 전략입니다.</p>\n<p>헤드리스 컴포넌트는 난해해 보일 수 있지만, 그 진정한 힘은 유연성, 재사용 가능성, 그리고 코드베이스의 구성과 깔끔함을 향상시킬 수 있는 능력에 있습니다. 이 글에서는 이 패턴이 정확히 무엇인지, 왜 유용한지, 그리고 인터페이스 디자인에 대한 접근 방식을 어떻게 혁신할 수 있는지에 대해 탐구해 볼 것입니다.</p>\n<p>설명을 위해, 먼저 헤드리스 컴포넌트를 간단하면서도 효과적으로 적용하는 방법, 즉 두 개의 유사한 컴포넌트에서 ‘useToggle’ 훅을 추출하여 코드 중복을 줄이는 방법을 살펴보겠습니다. 이 예시는 사소해 보일 수 있지만, 헤드리스 컴포넌트의 핵심 원칙을 이해하는 데 도움이 됩니다. 공통 패턴을 인식하고 이를 재사용 가능한 부분으로 추출함으로써, 코드베이스를 간소화하고 더 효율적인 개발 과정을 위한 기반을 마련할 수 있습니다.</p>\n<p>하지만 이것은 빙산의 일각에 불과합니다! 더 깊게 파고들면, 우리는 이 원칙이 실제로 적용되는 더 복잡한 사례를 만나게 될 것입니다. 그것은 향상된 입력 컴포넌트를 생성하기 위한 강력한 라이브러리인 Downshift를 활용하는 것입니다.</p>\n<p>이 글을 모두 읽고나서, 헤드리스 컴포넌트에 대한 이해뿐만 아니라, 이 강력한 패턴을 자신의 프로젝트에 통합할 수 있는 자신감도 얻을 수 있길 바랍니다. 이제, 헤드리스 컴포넌트에 대한 혼란을 뒤로하고 혁신적인 잠재력에 대해서 알아봅시다.</p>\n<h1 id=\"토글-컴포넌트\" style=\"position:relative;\"><a href=\"#%ED%86%A0%EA%B8%80-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"토글 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>토글 컴포넌트</h1>\n<p>토글은 수많은 애플리케이션에서 필수적인 부분을 차지합니다. “이 기기에서 내 정보 기억”, “알림 활성화” 또는 늘 인기 있는 “다크 모드”와 같은 기능을 뒤에서 조용히 수행합니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:720/format:webp/1*2pB6tpnJo5O0YSgin4przg.png\" alt=\"토글 컴포넌트\">\n<em>(사진: 토글 컴포넌트)</em></p>\n<p>React에서 이러한 토글을 만드는 것은 놀라울 정도로 간단한 과정입니다. 어떻게 구현할 수 있는지 살펴보겠습니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ToggleButton</span><span class=\"mtk1\"> = () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">isToggled</span><span class=\"mtk1\">, </span><span class=\"mtk12\">setIsToggled</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">useState</span><span class=\"mtk1\">(</span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">toggle</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">useCallback</span><span class=\"mtk1\">(() </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">setIsToggled</span><span class=\"mtk1\">((</span><span class=\"mtk12\">prevState</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> !</span><span class=\"mtk12\">prevState</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }, []);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">div</span><span class=\"mtk1\"> </span><span class=\"mtk12\">className</span><span class=\"mtk1\">=</span><span class=\"mtk8\">&quot;toggleContainer&quot;</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">p</span><span class=\"mtk17\">&gt;</span><span class=\"mtk1\">Do not disturb</span><span class=\"mtk17\">&lt;/</span><span class=\"mtk4\">p</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">button</span><span class=\"mtk1\"> </span><span class=\"mtk12\">onClick</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk12\">toggle</span><span class=\"mtk4\">}</span><span class=\"mtk1\"> </span><span class=\"mtk12\">className</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk12\">isToggled</span><span class=\"mtk1\"> ? </span><span class=\"mtk8\">&quot;on&quot;</span><span class=\"mtk1\"> : </span><span class=\"mtk8\">&quot;off&quot;</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">{</span><span class=\"mtk12\">isToggled</span><span class=\"mtk1\"> ? </span><span class=\"mtk8\">&quot;ON&quot;</span><span class=\"mtk1\"> : </span><span class=\"mtk8\">&quot;OFF&quot;</span><span class=\"mtk4\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&lt;/</span><span class=\"mtk4\">button</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;/</span><span class=\"mtk4\">div</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p><code>useState</code> 훅은 초기 값이 <code>false</code>인 상태 변수 <code>isToggled</code>를 설정합니다. <code>useCallback</code>으로 생성된 <code>toggle</code> 함수는 호출될 때마다 (버튼 클릭 시) <code>isToggled</code> 값을 <code>true</code>와 <code>false</code> 사이에서 전환합니다. 버튼의 모양과 텍스트(“ON” 또는 “OFF”)는 <code>isToggled</code> 상태를 동적으로 반영합니다.</p>\n<p>이제 완전히 다른 컴포넌트인 ExpandableSection을 만들어야 한다고 가정해 보겠습니다. 이 컴포넌트는 섹션의 세부 정보를 표시하거나 숨깁니다. 제목 옆에 버튼이 있으며, 클릭하여 세부 정보를 펼치거나 접을 수 있습니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:720/format:webp/1*-2r7tI3HODG8znIbGcZ_gg.png\" alt=\"ExpandableSection 컴포넌트\"></p>\n<p><em>(사진: ExpandableSection 컴포넌트)</em></p>\n<p>구현도 그리 어렵지 않습니다. 아래와 같이 쉽게 할 수 있습니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ExpandableSection</span><span class=\"mtk1\"> = ({ </span><span class=\"mtk12\">title</span><span class=\"mtk1\">, </span><span class=\"mtk12\">children</span><span class=\"mtk1\"> }: </span><span class=\"mtk10\">ExpandableSectionType</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">isOpen</span><span class=\"mtk1\">, </span><span class=\"mtk12\">setIsOpen</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">useState</span><span class=\"mtk1\">(</span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">toggleOpen</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">useCallback</span><span class=\"mtk1\">(() </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">setIsOpen</span><span class=\"mtk1\">((</span><span class=\"mtk12\">prevState</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> !</span><span class=\"mtk12\">prevState</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }, []);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">div</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">h2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">onClick</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk12\">toggleOpen</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&gt;</span><span class=\"mtk4\">{</span><span class=\"mtk12\">title</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&lt;/</span><span class=\"mtk4\">h2</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">{</span><span class=\"mtk12\">isOpen</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">div</span><span class=\"mtk17\">&gt;</span><span class=\"mtk4\">{</span><span class=\"mtk12\">children</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&lt;/</span><span class=\"mtk4\">div</span><span class=\"mtk17\">&gt;</span><span class=\"mtk4\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;/</span><span class=\"mtk4\">div</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p>두 예제 사이에는 명백한 유사성이 있습니다. <code>ToggleButton</code>의 ‘on’ 과 ‘off’ 상태는 <code>ExpandableSection</code>의 ‘펼치기(expand)’ 와 ‘접기(collapse)’ 작업과 유사합니다. 이러한 공통점을 인식하면, 이 공통 기능을 별도의 기능으로 추상화할 수 있습니다. React 생태계에서는 사용자 정의 훅을 생성하여 이를 수행합니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">useToggle</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">init</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">false</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">state</span><span class=\"mtk1\">, </span><span class=\"mtk12\">setState</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">useState</span><span class=\"mtk1\">(</span><span class=\"mtk12\">init</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">toggle</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">useCallback</span><span class=\"mtk1\">(() </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">setState</span><span class=\"mtk1\">((</span><span class=\"mtk12\">prevState</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> !</span><span class=\"mtk12\">prevState</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }, []);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">state</span><span class=\"mtk1\">, </span><span class=\"mtk12\">toggle</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p>리팩터링은 상당히 간단해 보일 수 있지만, 표현(UI)에서 동작을 분리한다는 중요한 개념을 강조합니다. 이 시나리오에서, 사용자 정의 훅은 JSX로부터 독립된 상태 머신 역할을 합니다. <code>ToggleButton</code>과 <code>ExpandableSection</code> 모두 이 동일한 기본 로직을 활용합니다.</p>\n<p>중간 규모의 프론트엔드 프로젝트에 상당한 시간을 투자해 본 사람들은, 대부분의 업데이트나 버그가 UI 시각적 요소와 관련된 것이 아니라 UI 상태 관리와 관련된 로직에 문제가 있다는 것을 알게 될 것입니다. 훅은 이러한 로직을 중앙 집중화하는 강력한 도구를 제공하여, 코드 분석, 최적화 그리고 유지보수를 더욱 쉽게 만듭니다.</p>\n<h1 id=\"헤드리스-컴포넌트\" style=\"position:relative;\"><a href=\"#%ED%97%A4%EB%93%9C%EB%A6%AC%EC%8A%A4-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"헤드리스 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>헤드리스 컴포넌트</h1>\n<p>실제로 이 패턴을 사용하여 동작(또는 상태 관리)과 표현을 분리하는 훌륭한 라이브러리가 이미 많이 있습니다. 그리고 이러한 컴포넌트 라이브러리 중 가장 유명한 것은 <a href=\"https://www.downshift-js.com/\">Downshift</a> 일 것입니다.</p>\n<p>Downshift는 UI를 렌더링하지 않고 동작과 상태를 관리하는 헤드리스 컴포넌트의 개념을 적용합니다. render 속성 함수에서 상태와 일련의 액션을 제공하여 UI에 연결할 수 있게 합니다. 이러한 방식으로, Downshift는 복잡한 상태와 접근성 관리를 담당하는 동시에 UI 제어를 가능하게 해줍니다.</p>\n<p>예를 들어, 드롭다운 목록을 만들고 싶다면, 당연히 목록의 데이터, 트리거, 그리고 선택한 항목을 강조하는 방법, 렌더링할 라인 수에 대한 몇 가지 사용자 정의가 필요합니다. 하지만 크로스 브라우저 및 크로스 디바이스를 포함하여 고려해야 할 수많은 예외 사항이 있기 때문에 접근성을 처음부터 구축하고 싶지 않습니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:720/format:webp/1*PpHMaCNGrahAiz5zOIiSAQ.png\" alt=\"StateSelect 컴포넌트\"></p>\n<p><em>(사진: StateSelect 컴포넌트)</em></p>\n<p>Downshift를 사용하면 몇 줄의 JSX만으로도 접근성 있는 select를 쉽게 만들 수 있습니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">StateSelect</span><span class=\"mtk1\"> = () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">isOpen</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">selectedItem</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">getToggleButtonProps</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">getLabelProps</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">getMenuProps</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">highlightedIndex</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">getItemProps</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  } = </span><span class=\"mtk11\">useSelect</span><span class=\"mtk1\">({</span><span class=\"mtk12\">items:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">states</span><span class=\"mtk1\">});</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">div</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">label</span><span class=\"mtk1\"> </span><span class=\"mtk4\">{</span><span class=\"mtk1\">...</span><span class=\"mtk11\">getLabelProps</span><span class=\"mtk1\">()</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&gt;</span><span class=\"mtk1\">Issued State:</span><span class=\"mtk17\">&lt;/</span><span class=\"mtk4\">label</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">div</span><span class=\"mtk1\"> </span><span class=\"mtk4\">{</span><span class=\"mtk1\">...</span><span class=\"mtk11\">getToggleButtonProps</span><span class=\"mtk1\">()</span><span class=\"mtk4\">}</span><span class=\"mtk1\"> </span><span class=\"mtk12\">className</span><span class=\"mtk1\">=</span><span class=\"mtk8\">&quot;trigger&quot;</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">{</span><span class=\"mtk12\">selectedItem</span><span class=\"mtk1\"> ?? </span><span class=\"mtk8\">&#39;Select a state&#39;</span><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      &lt;/</span><span class=\"mtk12\">div</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">ul</span><span class=\"mtk1\"> </span><span class=\"mtk4\">{</span><span class=\"mtk1\">...</span><span class=\"mtk11\">getMenuProps</span><span class=\"mtk1\">()</span><span class=\"mtk4\">}</span><span class=\"mtk1\"> </span><span class=\"mtk12\">className</span><span class=\"mtk1\">=</span><span class=\"mtk8\">&quot;menu&quot;</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">{</span><span class=\"mtk12\">isOpen</span><span class=\"mtk1\"> &amp;&amp;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk12\">states</span><span class=\"mtk1\">.</span><span class=\"mtk11\">map</span><span class=\"mtk1\">((</span><span class=\"mtk12\">item</span><span class=\"mtk1\">, </span><span class=\"mtk12\">index</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk17\">&lt;</span><span class=\"mtk4\">li</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">              </span><span class=\"mtk12\">style</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">highlightedIndex</span><span class=\"mtk1\"> === </span><span class=\"mtk12\">index</span><span class=\"mtk1\"> ? {</span><span class=\"mtk12\">backgroundColor:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;#bde4ff&#39;</span><span class=\"mtk1\">} : {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">              </span><span class=\"mtk4\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">              </span><span class=\"mtk12\">key</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk8\">`</span><span class=\"mtk4\">${</span><span class=\"mtk12\">item</span><span class=\"mtk4\">}${</span><span class=\"mtk12\">index</span><span class=\"mtk4\">}</span><span class=\"mtk8\">`</span><span class=\"mtk4\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">              </span><span class=\"mtk4\">{</span><span class=\"mtk1\">...</span><span class=\"mtk11\">getItemProps</span><span class=\"mtk1\">({</span><span class=\"mtk12\">item</span><span class=\"mtk1\">, </span><span class=\"mtk12\">index</span><span class=\"mtk1\">})</span><span class=\"mtk4\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">              </span><span class=\"mtk4\">{</span><span class=\"mtk12\">item</span><span class=\"mtk4\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk17\">&lt;/</span><span class=\"mtk4\">li</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          ))</span><span class=\"mtk4\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&lt;/</span><span class=\"mtk4\">ul</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    &lt;/</span><span class=\"mtk12\">div</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>이 컴포넌트는 Downshift의 <code>useSelect</code> 훅을 사용하는 상태 선택자입니다. 이를 통해 사용자는 드롭다운 메뉴에서 상태를 선택할 수 있습니다.</p>\n<ul>\n<li><code>useSelect</code> 는 선택 입력에 대한 상태와 상호 작용을 관리합니다.</li>\n<li><code>isOpen</code>, <code>selectedItem</code>, <code>highlightedIndex</code> 는 <code>useSelect</code> 에 의해 제어되는 상태 변수입니다.</li>\n<li><code>getToggleButtonProps</code>, <code>getLabelProps</code>, <code>getMenuProps</code>, <code>getItemProps</code> 는 해당 요소에 필요한 속성을 제공하는 함수입니다.</li>\n<li><code>isOpen</code> 은 드롭다운이 열려 있는지 여부를 결정합니다.</li>\n<li><code>selectedItem</code> 은 현재 선택된 상태의 값을 보유합니다.</li>\n<li><code>highlightedIndex</code> 는 현재 강조 표시된 목록 항목을 나타냅니다.</li>\n<li>드롭다운이 열려 있으면, <code>states.map</code>은 선택 가능한 상태의 정렬되지 않은 목록을 생성합니다.</li>\n<li>스프레드 (<strong><code>...</code></strong>) 연산자는 Downshift의 훅에서 컴포넌트에 props를 전달하는 데 사용됩니다. 여기에는 클릭 핸들러, 키보드 탐색 및 ARIA 속성과 같은 것들이 포함됩니다.</li>\n<li>상태가 선택되면 버튼 내용으로 표시됩니다. 그렇지 않으면 ‘Select a state’라고 표시됩니다.</li>\n</ul>\n<p>이 접근 방식은 렌더링에 대한 완전한 제어를 제공하므로, 애플리케이션의 모양과 느낌에 맞게 컴포넌트를 스타일링하고 필요한 경우 사용자 정의 동작을 적용할 수 있습니다. 또한 다양한 컴포넌트나 프로젝트 간에 동작 로직을 공유하는 데도 매우 좋습니다.</p>\n<p>이미 이 패턴을 따르고 있는 헤드리스 컴포넌트 라이브러리도 몇 가지 더 있습니다.</p>\n<ul>\n<li><a href=\"https://reakit.io/\">Reakit</a>: 접근 가능한 고급 UI 라이브러리, 툴킷, 디자인 시스템 등을 구축하기 위한 헤드리스 컴포넌트 세트를 제공합니다.</li>\n<li><a href=\"https://tanstack.com/table/v8\">React Table</a>: 조립하기 위한 헤드리스 유틸리티입니다. 훅 기반이며 모든 종류의 테이블을 만들 수 있습니다.</li>\n<li><a href=\"https://github.com/streamich/react-use\">react-use</a>: 여러 헤드리스 컴포넌트가 포함된 훅의 모음입니다.</li>\n</ul>\n<p><strong>지속 가능한 React 코드 작성법에 대해 자세히 알아보기 위해, leanpub에서 <a href=\"https://leanpub.com/react-clean-code\">관련 책</a>을 썼습니다. <a href=\"https://leanpub.com/react-clean-code/c/mYXp686cMFw1\">이 링크를 통해 30% 할인</a>된 가격으로 사본을 받으실 수 있습니다.</strong></p>\n<h1 id=\"좀-더-깊이-파보기\" style=\"position:relative;\"><a href=\"#%EC%A2%80-%EB%8D%94-%EA%B9%8A%EC%9D%B4-%ED%8C%8C%EB%B3%B4%EA%B8%B0\" aria-label=\"좀 더 깊이 파보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>좀 더 깊이 파보기</h1>\n<p>의도적으로 UI에서 로직을 계속 분리해 나가면, 점차적으로 계층 구조가 형성됩니다. 이 구조는 전체 애플리케이션에 걸쳐있는 기존의 계층형 아키텍처가 아니라 애플리케이션의 UI 일부에 한정된 구조입니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:720/format:webp/1*dMJwjz15l14yoLvFpxxaDg.png\" alt=\"헤드리스 UI 패턴\"></p>\n<p><em>(사진: 헤드리스 UI 패턴)</em></p>\n<p>이 배치에서 JSX(또는 대부분의 태그)는 최상위 계층에서 정의되며, 이 계층은 전달된 속성을 표시하는 것만을 담당합니다. 바로 아래에는 ‘헤드리스 컴포넌트’라고 불리는 것이 있습니다. 이 컴포넌트는 모든 동작을 유지하고 상태를 관리하며 JSX와 상호 작용할 인터페이스를 제공합니다. 이 구조의 기반에는 도메인별 로직을 캡슐화하는 데이터 모델이 있습니다. 이러한 모델들은 UI 또는 상태와 관련이 없습니다. 대신, 데이터 관리와 비즈니스 로직에 중점을 둡니다. 이 계층적 접근법은 문제를 깔끔하게 분리하여 코드의 명확성과 유지 관리성을 향상시킵니다.</p>\n<h1 id=\"균형-잡힌-시각\" style=\"position:relative;\"><a href=\"#%EA%B7%A0%ED%98%95-%EC%9E%A1%ED%9E%8C-%EC%8B%9C%EA%B0%81\" aria-label=\"균형 잡힌 시각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>균형 잡힌 시각</strong></h1>\n<p>다른 유형의 기술과 마찬가지로 헤드리스 UI도 채택하기 전에 알아야 할 장단점이 있습니다. 먼저 헤드리스 UI의 이점에 대해 논의해 보겠습니다.</p>\n<ol>\n<li><strong>재사용성</strong>:헤드리스 컴포넌트의 주요 장점은 재사용성입니다. 로직을 독립적인 컴포넌트로 캡슐화함으로써, 여러 UI 요소에서 이러한 컴포넌트를 재사용할 수 있습니다. 이는 코드 중복을 줄일 뿐만 아니라 애플리케이션 전반에 걸쳐 일관성을 강화합니다.</li>\n<li><strong>관심사 분리</strong>: 헤드리스 컴포넌트는 로직과 표현을 명확하게 분리합니다. 이로 인해 코드베이스가 더 관리하기 쉽고 이해하기 쉬워지며, 특히 업무가 분산된 대규모 팀에게 유용합니다.</li>\n<li><strong>유연성</strong>: 헤드리스 컴포넌트는 프레젠테이션에 구애받지 않기 때문에 디자인 유연성을 높일 수 있습니다. 기본 로직에 영향을 주지 않고 원하는 만큼 UI를 사용자 정의할 수 있습니다.</li>\n<li><strong>테스트 가능성</strong>: 프레젠테이션과 로직이 분리되어 있기 때문에, 비즈니스 로직에 대한 단위 테스트 작성이 더 쉽습니다.</li>\n</ol>\n<p>반면, 일체형 컴포넌트보다 조금 더 복잡하기 때문에 다음 고려 사항을 염두에 두고 현명하게 사용해야 합니다.</p>\n<ol>\n<li><strong>초기 부담</strong>: 더 단순한 애플리케이션 또는 컴포넌트의 경우, 헤드리스 컴포넌트를 생성하는 것이 과도한 엔지니어링처럼 느껴져 불필요한 복잡성을 초래할 수 있습니다.</li>\n<li><strong>학습 곡선</strong>: 이 개념에 익숙하지 않은 개발자들은 처음에 이해하기 어려울 수 있으며, 학습 곡선이 더 가파르게 느껴질 수 있습니다.</li>\n<li>남용 <strong>가능성</strong>: 모든 컴포넌트를 헤드리스로 만들려고 하다 보면, 불필요한 경우에도 과도하게 사용하게 되어 코드베이스가 지나치게 복잡해질 수 있습니다.</li>\n<li><strong>잠재적 성능 문제</strong>: 일반적으로 큰 문제는 아니지만, 신중하게 처리하지 않으면 공통 로직을 사용하여 여러 컴포넌트를 다시 렌더링하는 것이 성능 문제로 이어질 수 있습니다.</li>\n</ol>\n<p>기억하세요, 헤드리스 UI는 다른 아키텍처 패턴처럼 모든 것에 적용되는 만능 해결책이 아닙니다. 이를 사용할지 여부는 프로젝트의 특정 요구 사항과 복잡성을 기반으로 결정되어야 합니다.</p>\n<h1 id=\"추가적인-읽을거리\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80%EC%A0%81%EC%9D%B8-%EC%9D%BD%EC%9D%84%EA%B1%B0%EB%A6%AC\" aria-label=\"추가적인 읽을거리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가적인 읽을거리</h1>\n<ul>\n<li><a href=\"https://www.merrickchristensen.com/articles/headless-user-interface-components/\">Headless User Interface Components</a></li>\n<li><a href=\"https://tanstack.com/table/v8/docs/guide/introduction\">Headless UI</a></li>\n<li><a href=\"https://martinfowler.com/articles/modularizing-react-apps.html\">Modularizing React Applications with Established UI Patterns</a></li>\n</ul>\n<h1 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h1>\n<p>이 글에서, 복잡한 UI 작업을 처리하는 강력한 접근법인 헤드리스 UI의 세계를 탐구했습니다. 렌더링을 분리하는 것이 어떻게 더 유지보수가 쉽고 재사용 가능한 코드를 생성할 수 있게 해주며, 중복성과 잠재적인 버그를 줄일 수 있는지 살펴보았습니다. 먼저 <code>useToggle</code>이라는 사용자 정의 리액트 훅을 생성하고 두 개의 별도의 컴포넌트에서의 적용을 보여주는 간단한 예를 통해 이를 설명했습니다. 그런 다음 향상된 입력 컴포넌트 구현을 용이하게 하는 뛰어난 라이브러리인 Downshift와 함께 이 개념을 보다 복잡한 시나리오로 확장했습니다. ‘헤드리스’ 접근법에 대한 더 깊은 이해를 통해, 향후 프로젝트에서 더 확장 가능하고 유지보수가 쉬운 UI를 만드는데 이 패턴을 활용할 수 있기를 바랍니다.</p>\n<p><strong>이 글이 마음에 드신다면, <a href=\"https://juntao.substack.com/\">제 메일링 리스트에 가입</a>해주세요. 저는 매주 <a href=\"https://juntao-qiu.medium.com/\">블로그</a>, <a href=\"https://leanpub.com/u/juntao\">책</a>, <a href=\"https://www.youtube.com/@icodeit.juntao\">비디오</a>를 통해 클린 코드와 리팩토링 기법을 공유합니다.</strong></p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk15 { color: #C586C0; }\n  .default-dark .mtk17 { color: #808080; }\n  .default-dark .mtk8 { color: #CE9178; }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"date":"September 13, 2023","title":"(번역) React에서 UI와 로직 분리하기:헤드리스 컴포넌트를 사용한 클린 코드 접근법","categories":"react","author":"soobing"},"fields":{"slug":"/react/decoupling-ui-and-logic-in-react-a-clean-code-approach-with-headless-components/"}},"prev":{"id":"bba3a1f3-ce86-5073-bc51-efe214981fa7","html":"<p>Next.js나 Remix 같은 프레임워크 내에서 React-Query를 사용한다면, 서버 렌더링 될 때 요청 후 응답받은 데이터를 SPA 방식으로 전환되고 나서도 유지할 수 있을까요? 어떻게 가능할까요? React Query의 <code>hydrate</code>와 <code>dehydrate</code>는 서버에서 미리 가져온 데이터를 클라이언트 사이드에서 재사용 할 수 있게 해줍니다. 이번 글을 통해 서버 렌더링과 어떻게 이를 가능하게 하는지 <code>hydrate</code>와 <code>dehydrate</code>에  대해서 알아봅시다.</p>\n<h2 id=\"server-rendering\" style=\"position:relative;\"><a href=\"#server-rendering\" aria-label=\"server rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Server Rendering</h2>\n<p>서버 렌더링은 사용자가 페이지를 로드하는 즉시 볼 수 있는 초기 HTML을 서버에서 생성하는 행위입니다. 이는 페이지 요청 시 즉시 발생할 수 있으며(SSR), 이전 요청이 캐시 되었거나 빌드 시간에 미리 생성(SSG) 할 수도 있습니다.</p>\n<p>클라이언트 렌더링 애플리케이션에서는 사용자에게 화면에 콘텐츠를 표시하기 전에 최소 3번의 서버 왕복(roundtrips)이 필요합니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"bash\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">1. |-&gt; Markup (내용 없이 - 비어있는 index.html)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">2.   |-&gt; JS</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">3.     |-&gt; Query</span></span></span></code></pre>\n<p>서버 렌더링은 위의 과정을 아래와 같이 같이 변환한다는 것입니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"bash\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">1. |-&gt; Markup (내용이 채워져있고, data가 초기화 되어있음)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">2.   |-&gt; JS</span></span></span></code></pre>\n<p>1번이 완료되면 사용자는 콘텐츠를 볼 수 있고, 2번이 끝나면 페이지가 상호작용 가능하고 클릭할 수 있게 됩니다. 마크업에 필요한 초기 데이터가 포함되어 있기 때문에, 적어도 데이터를 다시 검증할 필요가 있을 때까지는 클라이언트에서 3번을 실행할 필요가 없습니다.</p>\n<p>서버 렌더링을 통해 1번 과정에서 내용이 채워져 있고 data가 초기화되어있는 html을 생성하기 위해서는 마크업을 생성/렌더링 하기 전에 해당 데이터를 미리 가져와야(prefetch) 하며, 데이터를 직렬화 가능한(serializable) 형식으로 dehydrate 시켜 마크업에 포함(embed) 시키고, 클라이언트에서는 React Query 캐시로 해당 데이터를 hydrate 하여 새로운 fetch를 클라이언트에서 추가적으로 할 필요가 없도록 해야 합니다.</p>\n<h2 id=\"initialdata-를-사용하여-서버에서-fetch한-데이터-사용하기\" style=\"position:relative;\"><a href=\"#initialdata-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-fetch%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"initialdata 를 사용하여 서버에서 fetch한 데이터 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>initialData</code> 를 사용하여 서버에서 fetch한 데이터 사용하기</h2>\n<p>React Query의 <code>prefetching</code>과 <code>dehydrate</code>/<code>hydrate</code> API를 전혀 사용하지 않고, useQuery에 raw 데이터를 <code>initialData</code> 옵션으로 전달하는 방법입니다. 이 방법을 이용해서도 서버에서 미리 가져온 데이터를 클라이언트 사이드에서 재사용할 수 있는데요, 어떤 문제점이 있고 왜 Hydration API가 나오게 되었는지 살펴봅시다. Next.js에서 React-Query를 사용한다고 가정해 봅니다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Next.js 페이지 라우터 예시</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getServerSideProps</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">posts</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getPosts</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">props:</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">posts</span><span class=\"mtk1\"> } }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Posts</span><span class=\"mtk1\">(</span><span class=\"mtk12\">props</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> } = </span><span class=\"mtk11\">useQuery</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;posts&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getPosts</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">initialData:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">props</span><span class=\"mtk1\">.</span><span class=\"mtk12\">posts</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><code>getStaticProps</code>나 이전의 <code>getInitialProps</code>에서도 잘 작동합니다. 이 방법은 설정은 최소한으로 하고, 일부 경우에는 빠른 해결책이 될 수 있지만, 전체 접근법에 비해 고려해야 할 몇 가지 tradeoff가 있습니다.</p>\n<p>참고: 여기서는 React Query를 사용하되, 데이터를 사전에 가져오기 위해 <code>initialData</code> 옵션을 사용하는 경우를 이야기하고 있음.*</p>\n<ul>\n<li>트리 매우 아래쪽에 있는 컴포넌트에서 <code>useQuery</code>를 호출하는 경우, <code>initialData</code>를 그 지점까지 전달해야 합니다.</li>\n<li>여러 위치에서 동일한 쿼리로 <code>useQuery</code>를 호출하는 경우, <code>initialData</code>를 하나에만 전달하는 것은 앱이 변경될 때 취약하고 문제가 발생할 수 있습니다. <code>initialData</code>와 함께 <code>useQuery</code>를 가진 컴포넌트를 제거하거나 이동하면, 컴포넌트가 다른 컴포넌트 내부에 깊숙이 위치하고 있고, 이런 구조에서 <code>useQuery</code>를 사용한다면, <em>(상위 컴포넌트에서 제공되는 <code>initialData</code>가 중첩된 하위 컴포넌트의 <code>useQuery</code>에 올바르게 전달되지 않아서)</em> 더 이상 데이터를 가지고 있지 않을 수 있습니다. 필요한 모든 쿼리에 <code>initialData</code>를 전달하는 것도 번거로울 수 있습니다.</li>\n<li>서버에서 쿼리가 언제 fetch 되었는지 알 수 없으므로, <code>dataUpdatedAt</code>와 쿼리의 refetching 여부는 페이지가 로드된 시점에 따라 결정됩니다.</li>\n<li>쿼리에 대한 데이터가 캐시에 이미 존재하는 경우에도, <code>initialData</code>는 이 데이터를 결코 덮어쓰지 않습니다. 심지어 새 데이터가 기존 데이터보다 신선하더라도 말입니다.\n<ul>\n<li>왜 특히 더 나쁜지를 이해하려면, 위의 <code>getServerSideProps</code> 예를 고려해 보세요. 페이지를 여러 번 왔다 갔다 하면, 매번 <code>getServerSideProps</code>가 호출되어 새로운 데이터를 가져오지만, <code>initialData</code> 옵션을 사용하기 때문에 클라이언트 캐시와 데이터는 결코 업데이트되지 않습니다.</li>\n</ul>\n</li>\n</ul>\n<p>이러한 단점은 Hydration API를 사용하여 해결할 수 있고, 설정 또한 더욱 간단합니다.</p>\n<h2 id=\"hydration-api-사용하기\" style=\"position:relative;\"><a href=\"#hydration-api-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"hydration api 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://tanstack.com/query/v5/docs/react/guides/ssr#using-the-hydration-apis\">Hydration API</a> 사용하기</h2>\n<p>React Query에서는 <code>dehydrate</code>와 <code>hydrate</code> 함수를 제공하여 이 과정을 간소화합니다. 각 API의 역할과 사용방법 그리고 공식 문서 예시에 대해서 알아보도록 합시다.</p>\n<h3 id=\"hydrate와-dehydrate의-역할\" style=\"position:relative;\"><a href=\"#hydrate%EC%99%80-dehydrate%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"hydrate와 dehydrate의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hydrate와 Dehydrate의 역할</h3>\n<ul>\n<li><code>dehydrate</code>는 서버에서 React Query의 상태를 클라이언트로 전송할 수 있는 형태로 만들기 위해 사용됩니다. 서버에서 데이터를 가져온 후, 이 데이터를 직렬화(serialization) 하여 클라이언트로 전송합니다. 직렬화된 데이터는 <code>DehydratedState</code> 형태로 표현되며, 클라이언트 측에서 <code>hydrate</code> 함수를 통해 다시 React Query 상태로 변환됩니다.</li>\n<li><code>hydrate</code>는 클라이언트 측에서 직렬화된 상태를 받아 이를 React Query의 상태로 변환합니다. 이 과정은 서버에서 미리 가져온 데이터를 클라이언트의 쿼리 캐시에 적용하여, 네트워크 요청 없이 데이터를 사용할 수 있게 합니다.</li>\n</ul>\n<h3 id=\"사용방법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"사용방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용방법</h3>\n<ol>\n<li>프레임워크 로더 함수에서 <code>const queryClient = new QueryClient(options)</code>를 생성합니다.</li>\n<li>앱 로더 함수에서, 미리 가져오고 싶은 각 쿼리에 대해 <code>await queryClient.prefetchQuery(...)</code>를 실행합니다.\n<ul>\n<li>가능하면 <code>await Promise.all(...)</code>을 사용해 쿼리들을 병렬로 가져옵니다.</li>\n<li>미리 가져오지 않은 쿼리들이 있어도 괜찮습니다. 이 쿼리들은 서버에서 렌더링 되지 않고, 애플리케이션이 상호작용할 수 있게 된 후 클라이언트에서 가져옵니다. 이는 사용자 상호작용 후에만 표시되거나 또는 페이지 하단에 있어 더 중요한 콘텐츠의 로딩을 방해하지 않기 위해 사용됩니다.</li>\n</ul>\n</li>\n<li>로더에서 <code>dehydrate(queryClient)</code>를 반환합니다. 이 반환 구문의 정확한 문법은 프레임워크에 따라 다를 수 있습니다.</li>\n<li><code>&#x3C;HydrationBoundary state={dehydratedState}></code>로 트리를 감싸는데, <code>dehydratedState</code>는 프레임워크 로더에서 옵니다. <code>dehydratedState</code>를 얻는 방법도 프레임워크에 따라 다릅니다.\n<ul>\n<li>이 작업은 각 라우트마다 수행하거나, 애플리케이션 최상단에서 수행하여 보일러플레이트를 줄일 수 있습니다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"nextjs에서-예시\" style=\"position:relative;\"><a href=\"#nextjs%EC%97%90%EC%84%9C-%EC%98%88%EC%8B%9C\" aria-label=\"nextjs에서 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://tanstack.com/query/v5/docs/react/guides/ssr#full-nextjs-pages-router-example\">Next.js에서 예시</a></h3>\n<ul>\n<li>\n<p>초기 세팅(앱 로더 함수)</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// _app.tsx</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">QueryClient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">QueryClientProvider</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;@tanstack/react-query&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk15\">default</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MyApp</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">Component</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pageProps</span><span class=\"mtk1\"> }) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">React</span><span class=\"mtk1\">.</span><span class=\"mtk11\">useState</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    () </span><span class=\"mtk4\">=&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">QueryClient</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">defaultOptions:</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk12\">queries:</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// SSR에서는 클라이언트에서 즉시 재요청하는 것을 피하기 위해,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// default staleTime을 0보다 높게 설정하는 것이 일반적입니다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">staleTime:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">60</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1000</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">QueryClientProvider</span><span class=\"mtk1\"> </span><span class=\"mtk12\">client</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk12\">queryClient</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">Component</span><span class=\"mtk1\"> </span><span class=\"mtk4\">{</span><span class=\"mtk1\">...</span><span class=\"mtk12\">pageProps</span><span class=\"mtk4\">}</span><span class=\"mtk1\"> </span><span class=\"mtk17\">/&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;/</span><span class=\"mtk10\">QueryClientProvider</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n</li>\n<li>\n<p>각 라우터에서</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// pages/posts.jsx</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">dehydrate</span><span class=\"mtk1\">, </span><span class=\"mtk12\">HydrationBoundary</span><span class=\"mtk1\">, </span><span class=\"mtk12\">QueryClient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">useQuery</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;@tanstack/react-query&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 이것은 getServerSideProps에서도 동일할 수 있습니다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getStaticProps</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">QueryClient</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prefetchQuery</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;posts&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getPosts</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">props:</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">dehydratedState:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">dehydrate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Posts</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// useQuery는 &lt;PostsRoute&gt;의 더 깊은 자식에서도 마찬가지로 사용될 수 있으며,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 어느 방식이든 데이터는 즉시 사용 가능합니다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> } = </span><span class=\"mtk11\">useQuery</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;posts&#39;</span><span class=\"mtk1\">], </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getPosts</span><span class=\"mtk1\"> })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 이 쿼리는 서버에서 미리 가져오지 않았으며, 클라이언트에서 시작될 때까지 요청하지 않을 것입니다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// 이 두 가지 패턴을 혼합해서 사용하는 것은 문제가 없습니다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">data</span><span class=\"mtk1\">: </span><span class=\"mtk12\">commentsData</span><span class=\"mtk1\"> } = </span><span class=\"mtk11\">useQuery</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;posts-comments&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getComments</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk15\">default</span><span class=\"mtk1\"> </span><span class=\"mtk11\">PostsRoute</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">dehydratedState</span><span class=\"mtk1\"> }) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    &lt;</span><span class=\"mtk12\">HydrationBoundary</span><span class=\"mtk1\"> </span><span class=\"mtk12\">state</span><span class=\"mtk1\">={</span><span class=\"mtk12\">dehydratedState</span><span class=\"mtk1\">}&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      &lt;</span><span class=\"mtk12\">Posts</span><span class=\"mtk1\"> /&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    &lt;/</span><span class=\"mtk12\">HydrationBoundary</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n</li>\n<li>\n<p>팁1) 보일러 플레이트를 없애기 위한 예시</p>\n<ul>\n<li>\n<p>모든 라우트에 이 부분을 포함하는 것은 상당한 보일러 플레이트처럼 보일 수 있습니다. 이 방법에 문제가 있는 것은 아니지만, 이 보일러 플레이트를 제거하고 싶다면, Next.js에서 설정을 다음과 같이 수정할 수 있습니다.</p>\n</li>\n<li>\n<p>AS-IS (보일러 플레이트 없애기 전)</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk15\">default</span><span class=\"mtk1\"> </span><span class=\"mtk11\">PostsRoute</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">dehydratedState</span><span class=\"mtk1\"> }) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    &lt;</span><span class=\"mtk12\">HydrationBoundary</span><span class=\"mtk1\"> </span><span class=\"mtk12\">state</span><span class=\"mtk1\">={</span><span class=\"mtk12\">dehydratedState</span><span class=\"mtk1\">}&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      &lt;</span><span class=\"mtk12\">Posts</span><span class=\"mtk1\"> /&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    &lt;/</span><span class=\"mtk12\">HydrationBoundary</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n</li>\n<li>\n<p>TO-BE (보일러 플레이트 없앤 후)</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// _app.tsx</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">HydrationBoundary</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">QueryClient</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">QueryClientProvider</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;@tanstack/react-query&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk15\">default</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MyApp</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">Component</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pageProps</span><span class=\"mtk1\"> }) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">React</span><span class=\"mtk1\">.</span><span class=\"mtk11\">useState</span><span class=\"mtk1\">(() </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">QueryClient</span><span class=\"mtk1\">())</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">QueryClientProvider</span><span class=\"mtk1\"> </span><span class=\"mtk12\">client</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk12\">queryClient</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">HydrationBoundary</span><span class=\"mtk1\"> </span><span class=\"mtk12\">state</span><span class=\"mtk1\">=</span><span class=\"mtk4\">{</span><span class=\"mtk12\">pageProps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">dehydratedState</span><span class=\"mtk4\">}</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">Component</span><span class=\"mtk1\"> </span><span class=\"mtk4\">{</span><span class=\"mtk1\">...</span><span class=\"mtk12\">pageProps</span><span class=\"mtk4\">}</span><span class=\"mtk1\"> </span><span class=\"mtk17\">/&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&lt;/</span><span class=\"mtk10\">HydrationBoundary</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk17\">&lt;/</span><span class=\"mtk10\">QueryClientProvider</span><span class=\"mtk17\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// pages/posts.tsx</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// HydrationBoundary를 포함한 PostsRoute를 제거하고 대신 Posts를 직접 내보냅니다:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk15\">default</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Posts</span><span class=\"mtk1\">() { ... }</span></span></span></code></pre>\n</li>\n<li>\n<p>팁2) 서버에서 조건부 prefetch 하는 방법</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getServerSideProps</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">QueryClient</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fetchQuery</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;user&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">email</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getUserByEmail</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">user</span><span class=\"mtk1\">?.</span><span class=\"mtk12\">userId</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prefetchQuery</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;projects&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">userId</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getProjectsByUser</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">props:</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">dehydratedState:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">dehydrate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">queryClient</span><span class=\"mtk1\">) } }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<ul>\n<li>\n<p>참고 - 클라이언트에서 조건부 fetch 하는법 (<code>enabled</code> 이용하기)</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"tsx\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 사용자 가져오기</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">data</span><span class=\"mtk1\">: </span><span class=\"mtk12\">user</span><span class=\"mtk1\"> } = </span><span class=\"mtk11\">useQuery</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;user&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">email</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getUserByEmail</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">userId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">user</span><span class=\"mtk1\">?.</span><span class=\"mtk12\">id</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 그 다음 사용자의 프로젝트 가져오기</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">status</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">fetchStatus</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">data</span><span class=\"mtk1\">: </span><span class=\"mtk12\">projects</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} = </span><span class=\"mtk11\">useQuery</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">queryKey:</span><span class=\"mtk1\"> [</span><span class=\"mtk8\">&#39;projects&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">userId</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">queryFn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">getProjectsByUser</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// userId가 존재할 때까지 쿼리는 실행되지 않음</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">enabled:</span><span class=\"mtk1\"> !!</span><span class=\"mtk12\">userId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">})</span></span></span></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"기타-참고사항\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%EC%B0%B8%EA%B3%A0%EC%82%AC%ED%95%AD\" aria-label=\"기타 참고사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 참고사항</h2>\n<ul>\n<li>서버와 클라이언트 간 시간 동기화: <code>staleTime</code> 설정은 서버에서 데이터를 가져온 시점을 기준으로 합니다. 서버의 시간 설정이 정확해야 올바르게 작동합니다.</li>\n<li>메모리 관리: 각 요청마다 새로운 <code>QueryClient</code>를 생성하는 경우, 서버의 메모리 사용량이 증가할 수 있습니다. 적절한 가비지 컬렉션 설정이 필요합니다.</li>\n<li>코드 분할과 요청 워터폴: 코드 분할을 사용하는 경우, 데이터 가져오기 코드를 메인 번들에 포함시킬지, 코드 분할된 번들에 넣을지 결정해야 합니다. 이는 성능과 요청 워터폴에 영향을 미칩니다.</li>\n</ul>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>React Query의 <code>hydrate</code>와 <code>dehydrate</code>는 서버 사이드 렌더링을 구현하는 데 있어 필수적인 도구입니다. 이들은 데이터를 효과적으로 전달하고, 애플리케이션의 성능을 최적화하는 데 중요한 역할을 합니다. 그러나 이 기능들을 사용할 때는 데이터의 필요성, 네트워크 오버헤드, 그리고 서버와 클라이언트 간의 일관성을 고려해야 합니다. 이를 통해 효율적이고 사용자 친화적인 SSR 경험을 구축할 수 있습니다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk3 { color: #6A9955; }\n  .default-dark .mtk15 { color: #C586C0; }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk8 { color: #CE9178; }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .mtk7 { color: #B5CEA8; }\n  .default-dark .mtk17 { color: #808080; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"date":"December 10, 2023","title":"[React-Query] 서버에서 prefetching 한 데이터 사용하기","categories":"react","author":"soobing"},"fields":{"slug":"/react/server-rendering-and-react-query/"}},"site":{"siteMetadata":{"siteUrl":"https://soobing.github.io","comments":{"utterances":{"repo":"soobing/soobing.github.io"}}}}},"pageContext":{"slug":"/react/introducing-signals/","nextSlug":"/react/decoupling-ui-and-logic-in-react-a-clean-code-approach-with-headless-components/","prevSlug":"/react/server-rendering-and-react-query/"}},
    "staticQueryHashes": ["1073350324","2938748437"]}