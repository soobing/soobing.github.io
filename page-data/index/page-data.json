{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"161feee4-18f2-5161-8900-a9bc5eda4367","excerpt":"지난 글에서 react-query의 hydrate, dehydrate을 통해 서버에서 prefetching 한 데이터 사용하는 방법에 대해서 살펴보았습니다. 서버에서 prefetching 한 데이터 사용하기 오늘은 조금 실용적으로 Next.js 13, 14 버전의 app router에서 react-query를 어떻게 사용하고 세팅하면 좋을지 고민했던 내용에 대해서 이야기해보도록 하겠습니다. 해당 글은 23년 10월에 메이저 버전 업데이트된, Next.js 14와 React-Query 5 를 기준으로 작성된 글입니다. 예시로 보여주는 코드는 저의 next-14-react-query repo에서 확인 할 수 있습니다. 제가 크게 고민했던 문제는 아래 세 가지입니다. Hydrate vs ReactQueryStreamedHydration 두 가지 API 중에 어떤 것을 채택할까? Hydration API 사용 시에 RSC, RCC 모두에서 깔끔한 코드를 유지하려면 queryOption은 …","frontmatter":{"categories":"react","title":"[React-Query] Next.js app router에서 사용하면서 고민했던 것들","date":"January 07, 2024"},"fields":{"slug":"/react/next-app-router-react-query/"}}},{"node":{"id":"55331269-8b15-516d-aa6d-7eb90d2fedee","excerpt":"원문: https://javascript.plainenglish.io/the-5-most-innovative-proposals-for-javascript-planned-for-2024-22139dd2f546  JavaScript Logo 2024 자바스크립트가 빠른 속도로 발전함에 따라 2024년은 이 프로그래밍 언어에 있어 중요한 해가 될 것입니다. 이 글에서는 개발자들이 자바스크립트 코딩에 접근하는 방식을 재정의하기 위한 최신 제안을 자세히 살펴보겠습니다. 이 글이 유용하길 바랍니다! 시작해 봅시다! 목차 데코레이터 Temporal API 파이프라인 연산자 Error cause 레코드와 튜플 1. 데코레이터 자바스크립트에 데코레이터가 도입된 것은 개발자가 클래스, 메서드, 프로퍼티 및 매개변수의 동작을 조작하고 개선할 수 있는 방법이 크게 발전했음을 의미합니다. 파이썬과 타입스크립트와 같은 다른 프로그래밍 언어에서 유래한 데코레이터는 기능을 추가하거나 수정하는 간결하고 선언적인…","frontmatter":{"categories":"javascript","title":"2024년 자바스크립트의 5가지 가장 혁신적인 제안","date":"December 20, 2023"},"fields":{"slug":"/javascript/the-5-most-innovative-proposals-for-javascript-planned-for-2024/"}}},{"node":{"id":"d77b67b4-3ea0-53b0-b513-8a24dd4da08d","excerpt":"Next.js나 Remix 같은 프레임워크 내에서 React-Query를 사용한다면, 서버 렌더링 될 때 요청 후 응답받은 데이터를 SPA 방식으로 전환되고 나서도 유지할 수 있을까요? 어떻게 가능할까요? React Query의 hydrate와 dehydrate는 서버에서 미리 가져온 데이터를 클라이언트 사이드에서 재사용 할 수 있게 해줍니다. 이번 글을 통해 서버 렌더링과 어떻게 이를 가능하게 하는지 hydrate와 dehydrate에  대해서 알아봅시다. Server Rendering 서버 렌더링은 사용자가 페이지를 로드하는 즉시 볼 수 있는 초기 HTML을 서버에서 생성하는 행위입니다. 이는 페이지 요청 시 즉시 발생할 수 있으며(SSR), 이전 요청이 캐시 되었거나 빌드 시간에 미리 생성(SSG) 할 수도 있습니다. 클라이언트 렌더링 애플리케이션에서는 사용자에게 화면에 콘텐츠를 표시하기 전에 최소 3번의 서버 왕복(roundtrips)이 필요합니다. 서버 렌더링은 위의 과정…","frontmatter":{"categories":"react","title":"[React-Query] 서버에서 prefetching 한 데이터 사용하기","date":"December 10, 2023"},"fields":{"slug":"/react/server-rendering-and-react-query/"}}},{"node":{"id":"9c6b2391-e371-545b-b36b-85a35b38a7ac","excerpt":"원문: https://preactjs.com/blog/introducing-signals/ 시그널은 앱이 복잡해져도 빠른 속도를 유지하도록 하는 상태 표현 방식입니다. 시그널은 반응형 원칙에 기반을 두고 있으며, 가상 돔에 최적화된 독특한 구현을 통해 개발자에게 훌륭한 경험을 제공합니다. 본질적으로 시그널은 특정 값을 가지고 있는 .value 속성을 가진 객체입니다. 컴포넌트 내에서 시그널의 value 속성에 접근하면, 그 시그널의 값이 변경될 때 해당 컴포넌트가 자동으로 업데이트됩니다. 이는 간단하고 작성하기 쉬울 뿐만 아니라, 앱이 얼마나 많은 컴포넌트를 가지고 있든 상태 업데이트가 빠르게 유지되도록 보장합니다. 시그널은 기본적으로 빠르며, 백그라운드에서 자동으로 업데이트를 최적화해줍니다. REPL에서 실행 시그널은 훅과 달리 컴포넌트 내부 또는 외부에서 사용할 수 있습니다. 또한 시그널은 훅과 클래스 컴포넌트 모두에서 훌륭하게 작동하므로, 기존 지식을 활용하며 자신의 속도에 …","frontmatter":{"categories":"react","title":"(번역) 시그널(Signal)에 대한 소개","date":"November 27, 2023"},"fields":{"slug":"/react/introducing-signals/"}}},{"node":{"id":"5f49b3c9-9991-5b3e-9e49-46ec9a85c02d","excerpt":"원글: https://itnext.io/decoupling-ui-and-logic-in-react-a-clean-code-approach-with-headless-components-82e46b5820c 프런트엔드 개발 영역에서는 용어와 패러다임이 때로는 이해하기 어려울 수 있으며 ‘헤드리스 UI’ 또는 ‘헤드리스 컴포넌트’도 이 범주에 속할 수 있습니다. 이러한 용어들이 무엇을 의미하는지 궁금해서 고개를 갸웃거리고, 혼자만 그런 것이 아닙니다. 사실, 혼란스러운 이름에도 불구하고 이러한 개념들은 복잡한 사용자 인터페이스 관리를 상당히 단순화할 수 있는 매력적인 전략입니다. 헤드리스 컴포넌트는 난해해 보일 수 있지만, 그 진정한 힘은 유연성, 재사용 가능성, 그리고 코드베이스의 구성과 깔끔함을 향상시킬 수 있는 능력에 있습니다. 이 글에서는 이 패턴이 정확히 무엇인지, 왜 유용한지, 그리고 인터페이스 디자인에 대한 접근 방식을 어떻게 혁신할 수 있는지에 대해 탐구해 볼 것입니다. …","frontmatter":{"categories":"react","title":"(번역) React에서 UI와 로직 분리하기:헤드리스 컴포넌트를 사용한 클린 코드 접근법","date":"September 13, 2023"},"fields":{"slug":"/react/decoupling-ui-and-logic-in-react-a-clean-code-approach-with-headless-components/"}}},{"node":{"id":"44fd3704-304a-5b2a-8702-af196e247d28","excerpt":"원글: https://github.com/kamranahmedse/design-patterns-for-humans/blob/master/readme.md 역자주: 이 글은 Kamran Ahmed의 글이며, PHP-7 기준으로 작성된 예제 코드를 타입스크립트로 변경하였습니다. logo 🎉 디자인 패턴에 대한 초간단 설명입니다! 🎉 누구든지 혼란스럽게 만들 수 있는 주제입니다. 이 글에서는 최대한 간단한 방식으로 설명함으로써 당신의 기억 속 (그리고 아마도 제 기억)에 각인시키기 위해 노력할 것입니다. 저의 다른 프로젝트도 확인하고 트위터에서 “안녕”이라고 인사해 보세요. 생성 패턴 구조 패턴 행동 패턴 심플 팩토리(Simple Factory) 어댑터(Adapter) 책임 연쇄(Chain of Responsibility) 팩토리 메서드(Factory Method) 브릿지(Bridge) 명령(Command) 추상 팩토리(Abstract Factory) 컴포지트(Composite) 반복자…","frontmatter":{"categories":"cs","title":"(번역) 우리들을 위한 디자인 패턴","date":"August 27, 2023"},"fields":{"slug":"/cs/design-patterns-for-humans/"}}},{"node":{"id":"7e56bfba-a382-5266-96c6-f581980fe75d","excerpt":"힙과 스택 메모리의 차이를 살펴보고, 자바스크립트 대표 엔진인 V8의 Resident set 구조와 Minor GC, Major GC 의 동작 알고리즘에 대해서 자세하게 살펴 보도록 하겠습니다. 이 글이 가비지 컬렉터가 어떻게 동작하는지 이해하는데 도움이 되길 바랍니다. V8 메모리 구조 (feat. Resident set) Resident Set은 실행 중인 프로그램의 메모리 관리를 위해 사용되는 용어로, 현재 V8 프로세스가 사용하는 모든 메모리를 나타냅니다. 이것은 JavaScript 코드, 객체, 함수, 변수 등을 저장하는 데 필요한 모든 메모리를 포함합니다. Resident Set은 다음과 같이 여러 세그먼트로 구성됩니다. \n출처: memory management in V8 stack vs heap 메모리 공간은 크게 스택 메모리(Stack memory)와 힙 메모리(Heap memory)로 구분되며, 힙 메모리는 다양한 목적으로 서비스하는 여러 공간으로 더 나누어집니다.…","frontmatter":{"categories":"javascript","title":"자바스크립트 가비지 컬렉션 알고리즘","date":"July 14, 2023"},"fields":{"slug":"/javascript/garbage-collection/"}}},{"node":{"id":"1a5d4b16-06aa-572e-802e-98a3de358758","excerpt":"원문: https://www.tecforfun.com/frameworks/how-to-manage-server-state-with-react-query/ React Query는 React 애플리케이션에서 데이터 페칭과 캐싱 프로세스를 간소화하는 라이브러리입니다. 이 라이브러리는 API와 기타 데이터 소스로부터 데이터를 페칭하고 업데이트하는 데 필요한 도구와 유틸리티를 제공하며 데이터 페칭의 상태와 캐싱을 자동으로 관리합니다. 이 라이브러리는 React 컴포넌트에서 데이터를 더 쉽게 다룰 수 있도록 다양한 훅과 유틸리티를 제공합니다. 이 포스트에서는 React Query의 주요 기능에 대해 이야기하겠습니다. 여기서 제 목적은 가능한 한 빨리 React Query를 사용하여 작업을 시작할 수 있는 출발점을 제공하는 것입니다. React 앱 개발에 경험이 있다면, 클라이언트 상태 관리를 위해 Redux와 같은 라이브러리를 사용한 적이 있을 수 있습니다. 반면에, React Query는 …","frontmatter":{"categories":"react","title":"(번역) React Query를 사용하여 서버 상태를 관리하는 방법","date":"June 21, 2023"},"fields":{"slug":"/react/How-to-manage-server-state-with-React-Query/"}}},{"node":{"id":"872218ff-8507-5910-8001-bc52d72fca27","excerpt":"원글: https://javascript.plainenglish.io/6-caching-strategies-to-remember-while-designing-cache-system-da058a3757cf 캐시 시스템 관련 용어, 읽기 vs 쓰기 중심의 애플리케이션에서 캐싱 전략, 캐시를 무효화하는 방법 등에 대해서 알려드리겠습니다. 개요 캐싱의 목표는 원본 소스에서 데이터를 가져오는 횟수를 줄여 처리 속도를 높이고 대기 시간을 감소시키는 것입니다. 캐싱은 인메모리 캐싱, 디스크 캐싱, 데이터베이스 캐싱, CDN 캐싱과 같은 다양한 수준의 아키텍처에서 구현될 수 있습니다. 데이터는 각각 고유한 이점이 있는 다양한 기술을 사용하여 캐싱할 수 있습니다. 인메모리 캐싱은 컴퓨터의 주 메모리에 데이터를 저장하여 디스크 저장소 보다 빠른 액세스를 제공합니다. 반면 디스크 캐싱은 하드 디스크에 데이터를 저장하므로 주 메모리보다는 느리지만 원격 소스에서 데이터를 가져오는 것보다 빠릅니다. 데이터…","frontmatter":{"categories":"cs","title":"(번역) 캐시 시스템 설계할 때 기억해야 할 6가지 캐싱 전략","date":"June 13, 2023"},"fields":{"slug":"/cs/6-caching-strategies/"}}},{"node":{"id":"7268c9ab-b8e9-5638-aa7a-c6c2e2d4f1a8","excerpt":"ES6에서는 Proxy, Reflect 객체를 통해 메타프로그래밍을 할 수 있습니다. 메타프로그래밍이 무엇인지? 그리고 Proxy와 Reflect에 대해서 알아보도록 하겠습니다. Metaprogramming 메타프로그래밍은 프로그램이 자기 자신을 조작할 수 있는 능력을 말합니다. 이를 통해 프로그램은 동적으로 자기 자신을 변화시키거나, 다른 프로그램을 분석하거나, 새로운 코드를 생성할 수 있습니다. 메타프로그래밍을 통해 코드의 유연성과 재사용성을 높일 수 있으며, 런타임에서 객체의 동작을 수정할 수 있어서 더욱 강력한 코드를 작성할 수 있습니다. 메타프로그래밍에서 가장 중요한 세 가지 개념 Introspection Introspection은 코드가 자기 자신을 검사할 수 있는 능력을 의미합니다. 이를 통해 코드의 내부 구조와 데이터를 검사하거나, 코드의 실행 시점에서 객체의 메소드나 프로퍼티에 접근할 수 있습니다. 자바스크립트에서는 ES6부터 Reflect 객체를 제공하여 Intr…","frontmatter":{"categories":"javascript","title":"Proxy, Reflect와 메타프로그래밍","date":"May 07, 2023"},"fields":{"slug":"/javascript/metaprogramming/"}}},{"node":{"id":"09bde05f-002e-5468-8934-6141fab54678","excerpt":"원문: https://blog.openreplay.com/deep-copying-objects-with-the-structuredclone-api/ Deep Copying Objects with the StructuredClone API 개요: 자바스크립트에서 객체를 복사하는 것은 간단하지 않으며, 이는 잘 알려진 문제입니다. 그러나 이 글에서는 해결책을 제공합니다. StructuredClone API를 사용하면 모든 객체를 간단하고 빠르게 복사할 수 있습니다. 자바스크립트에서 객체가 변수에 저장될 때, 해당 변수는 객체의 참조값을 갖습니다. 이는 변수 자체에 객체를 저장하는 것이 아니라, 객체의 메모리 위치를 나타내는 식별자를 저장한다는 것을 의미합니다. 객체의 복사는 원시 타입과는 다른 방식으로 동작합니다. 얕은 복사(Shallow Copy) vs. 깊은 복사(Deep Copy) 자바스크립트에서 값은 두 가지 방법으로 복사할 수 있습니다. 얕은 복사와 깊은 복사입니다. 얕은 복…","frontmatter":{"categories":"javascript","title":"(번역) StructuredClone API를 사용하여 객체를 깊은 복사하는 법","date":"May 07, 2023"},"fields":{"slug":"/javascript/deep-copying-objects-with-the-structuredclone-api/"}}},{"node":{"id":"7dd77d91-4c83-5f76-92b0-9e9b60089ea7","excerpt":"Date와 인연이 깊은지 날짜 선택 UI를 custom 해서 개발해야 하는 경험을 두 번째 하게 되었다. mui datepicker를 붙이기엔 너무 과해서  react-calendar 라이브러리를 사용하려고 했는데, 문제는 input은 함께 딸려오지 않기 때문에 input 관련 interaction은 직접 구현해야 했다. 인 하우스용 서비스라 여러 라이브러리 참고해서 직접 인터렉션을 정의하고 구현해 보았는데 기록 차 경험을 남겨본다!  TL;DR; 전체 구현 결과물은 code sandbox에서 확인할 수 있다. DatePicker 컴포넌트를 개발해 보자! (calendar는 라이브러리를 사용) 딱히 input에 대한 큰 요구사항이 없이 기능 개발을 해야 하는 경우 그냥 react-date-picker를 써라 DatePicker 컴포넌트 개발 dependency react-calendar dayjs props 설계 minDate, maxDate: date range를 지원해야하므로 …","frontmatter":{"categories":"feature","title":"날짜 입력 input 인터렉션 개발기","date":"April 23, 2023"},"fields":{"slug":"/feature/input-date/"}}},{"node":{"id":"08e40669-d8eb-531c-ab48-fcad02ba39ef","excerpt":"React 18로 버전업 하면서 프로젝트에 Recoil을 도입했는데, 그 과정에서 고민했던 내용을 기록차 남겨본다.\n TL;DR; 개념 정리나 장단점 비교에 대해서는 이미 알고 계신분들도 있을 것 같아서 폴더구조나 Redux를 대체하는게 맞는가에 대해서만 먼저 간단하게 요약한 내용을 공유한다. 1. 폴더 구조는 data source 별로 나누자 Suggested folder structure for atoms and selectors recoil 폴더 하위에 data source 별로 나누자 data source 하위에 atoms, selectors, hooks를 두자 2. concurrency mode 사용하려면 Redux는 버리고 Recoil로 넘어가야하나? useSyncExternalStore hook 을 사용해서 Redux에서도 동시성 모드를 사용할 수 있다. 이 부분에 대해서 고민해 본 내용은 아래에.. Recoil 도입 배경 Recoil은 Facebook에서 개발한 상태…","frontmatter":{"categories":"react","title":"Recoil 도입기(feat. 폴더구조)","date":"April 08, 2023"},"fields":{"slug":"/react/recoil-introduction/"}}},{"node":{"id":"e19abd3b-8537-528d-a31e-3a74ebbb5cc5","excerpt":"Introduction #1077 이슈를 보면 mutateFn의 variable을 필수값으로 변경한 이력을 볼 수 있다. mutation인데 왜 variable이 없냐고? 나의 경우에는 URL의 있는 queryParams를 읽어와서 데이터를 넘겨주면 되기 때문에 useSomething hook 안에서 처리하고 싶었다. 문제상황 mutate() 와 같이 variable에 아무 값도 넣지 않고 mutation 함수를 호출 할 수 없다.\nTVariables 타입에 undefined도 줘보고 이래저래 별짓을 다해봐도 필수값을 optional 하게 바꿀수는 없었다. 에러 발생\n 해결 실질적으로는 mute 함수에서 variable을 정의해서 넣어주는 것이기 때문에 그렇게 꼼수해결법도 아니다.","frontmatter":{"categories":"react troubleshooting","title":"[react-query] useMutation에서 variable 옵셔널하게 사용하기","date":"February 15, 2023"},"fields":{"slug":"/trouble-shooting/how-to-use-variable-optional-in-useMutation/"}}},{"node":{"id":"e1211b4f-4197-5605-879f-45d011d0d210","excerpt":"Introduction 이 글을 읽기전 React의 상태관리 종류 4가지를 먼저 읽으면 이해가 쉬울 수 있다. 얼마전 회사 프로젝트에 react-query를 도입하여 사용중인데 정말 너무너무 좋다. react-query를 이용해서 server state를 분리하다보니 loading 처리나, refetch 등 불필요한 코드가 많이 줄었다. 뭐든지 처음이 어렵지 큰 그림을 알고있으면 도입하여 적용하는데에는 큰 문제가 없고, 사용하면서 상황에 맞게 옵션과 아키텍쳐를 변경하면 된다고 생각하기 때문에, 이번 포스팅에서는 react-query를 적용하기 위해 필요한 전반적인 개념을 정리해보고자 한다. 용도 react-query는 서버 데이터 관리를 위한 라이브러리다.  이 라이브러리는 API 호출, 캐시 및 상태 관리, 오류 처리 등의 작업을 간단하게 처리할 수 있도록 도와준다. 서버 데이터 관리는 중요한 부분 중 하나다. 클라이언트에서는 서버로부터 데이터를 가져와(Read) 화면에 그려주고…","frontmatter":{"categories":"react","title":"react-query 시작하기 (feat. Tanstack)","date":"February 05, 2023"},"fields":{"slug":"/react/react-query-basic/"}}},{"node":{"id":"afca1d77-1bf9-59de-8227-74dfb0b19eed","excerpt":"Introduction react의 상태관리 종류 4가지를 알아보고, 각각의 종류별로 왜 다르게 관리해야하는지와 React에서 제공하는 API 혹은 어떤 라이브러리를 사용해서 관리하면 좋을지 알아보도록 하자. 상태관리 종류 Local state Global state App 어느곳(여러 컴포넌트)에서 state를 확인하거나 업데이트하기 위해서 필요함. 예: authenticated user state - logged in/out Server state 서버로 받은 데이터가 UI 상태와 통합되어야 하는 경우 필요함. 예: loading, error… 대표 라이브러리: SWR, react-query URL state URL에 존재하는 데이터(pathname, query params..) 1) Local state useState useReducer useReducer vs useState 차이 useState는 하나의 state operation만 가능했다면, useReducer는 여…","frontmatter":{"categories":"react","title":"React의 상태관리 종류 4가지","date":"February 03, 2023"},"fields":{"slug":"/react/react-state-management/"}}},{"node":{"id":"0e971c95-1f7f-53c0-b77f-9ed5af3af6e0","excerpt":"고민 혹시 제가 내린 결론에 다른 의견을 주신다면 매우 감사합니다. 🙇🏻‍♀️ 에러를 발생 vs 사전 확인을 통해 예외 처리 어느 부분까지 사전 확인이 필요한 걸까? 고민하게 된 배경 함수의 매개변수가 의도한 것과 다른 값이 들어왔을 때 에러가 발생할 수 있다. 그런데 문득 에러를 발생하게 하는 게 올바른 것인가? 아니면 애초에 에러가 발생할 상황을 하나도 빠짐없이 막는 것이 올바른 것인가? 고민이 들었다. 위의 코드를 보면 event 객체가 무조건 존재할 상황을 가졍하고 있으므로 만약 비정상적인 event 객체가 첫 번째 인자로 전달된다면 에러가 발생할 것이다. 그렇다면 이렇게 코드를 짜는 것이 좋을까? 애초에 event 객체가 존재하지 않을 수 있는 케이스를 고려해서 절대로 에러를 발생하지 않게 하는 것이 좋을까? 결론 App을 Crashed 시키지 않는 한해서 에러가 발생해야 하는 경우는 발생하게 내버려 두고, 예상할 수 있는 예외는 try…catch를 이용하여 에러가 전파되지 않도…","frontmatter":{"categories":"react","title":"에러 핸들링에 대한 고민 (feat. React)","date":"October 16, 2022"},"fields":{"slug":"/react/error-handle/"}}},{"node":{"id":"47a3c1ed-8f39-56be-81c1-c0cd470b4c41","excerpt":"문제상황 dropdown 컴포넌트를 만들었는데, focus가 다른곳으로 이동하면 펼쳐져있던 dropdown이 접혀져야 해서 blur 이벤트 발생시 접히도록 했다. 그랬더니 펼쳐져 있는 항목 중 하나를 click 했을때, 위에서 설정한 blur 이벤트가 먼저 발생하면서 click 이벤트가 호출되지 않는 이슈가 문제였다. dropdown_비정상동작.gif 문제의 코드 TL;DR Touch, mouse 이벤트 순서 touchstart touchmove touchend mouseover mousemove mousedown mouseup click 해결방법 click시 처리해줘야 하는 이벤트 핸들러를 click 이 아닌 mousedown 에서 처리해준다. dropdown_정상동작.gif Dropdown CodeSandbox Touch and mouse 이벤트 그러면 지금부터는 web.dev 문서를 살펴보면서 알게된 touch 이벤트의 도입 배경과 touch, mouse 이벤트를 함께 다루기…","frontmatter":{"categories":"feature browser","title":"Touch, Mouse 이벤트 함께 다루기 (feat. dropdown)","date":"September 18, 2022"},"fields":{"slug":"/browser/touch-mouse-event/"}}},{"node":{"id":"bacf9614-be80-5449-8b45-fa90310ef8dd","excerpt":"목표 Jenkins pipeline을 이용하여, bitbucket에서 PR 생성시 Jenkins job을 실행시키고 그 결과를 slack으로 전송한다. (Jenkins 내의 credential 설정이나 자세한 Jenkins 플러그인 설정 사항은 해당 글에서 포함하지 않음.) Webhook 웹훅이란 뭘까? 위의 목표를 이루려면 우리는 웹훅이 필요하다. 어플리케이션에 한정하여 특정 이벤트가 발생할 때 지정된 URL로 push 알림을 보내는 것이 webhook이다. callback 이랑 비슷한데, 조금 더 작은 범위라고 생각하면 된다. 이 방법은 주기적으로 검사하여 변경 사항이 있는지 확인하는 것보다 훨씬 효율적이다.  구현 방법 우리는 bitbucket에서 PR이 생성되었을때 Jenkins 플러그인인 Generic Webhook Trigger를 호출 하고, Jenkins Job 실행이 끝났을 때 slack Webhook을 호출 할 것이다. 1. Jekins에서 Generic Webho…","frontmatter":{"categories":"infra","title":"Bitbucket과 Jenkins를 연동하여 테스트 자동화 (feat. Generic Webhook Trigger)","date":"September 04, 2022"},"fields":{"slug":"/infra/jenkins-bitbucket/"}}},{"node":{"id":"2b300262-3404-5526-8a92-b3c887f4e178","excerpt":"보통 어플리케이션에서 공통된 디자인의 confirm 창을 사용한다. 이때, window.confirm과 같이 고객의 OK/CANCEL 클릭 여부에 따라서 다음 동작을 이어나가게 하고싶다면 어떻게 구현해야할까? 준비물 Modal Component (global 하게 등록) Global State Modal Hook 보통 웹 어플리케이션에서는 공통된 디자인의 confirm을 사용하므로 화면에 보여지는 역할을 하는 Modal Component가 필요하다. 이 컴포넌트는 어플리케이션 전반에 걸쳐서 자주 사용하는 라이브러리이므로 App.js에서 global 하게 로드한다. global 하게 등록된 Modal 컴포넌트를 제어하기 위해서는 어플리케이션 어느 곳에서든 제어 가능하게 하기 위해서 global state가 필요하다. 그래서 modal 관련 state가 변경되었을때, Modal 컴포넌트가 render 되게 한다. 이제 window.confirm 처럼 사용하기 위해 confirm 함수를…","frontmatter":{"categories":"feature","title":"Promise를 사용하여 window.confirm 구현하기","date":"August 19, 2022"},"fields":{"slug":"/feature/confirm/"}}},{"node":{"id":"44f1621e-8bc3-5e6b-bf8a-29698d901f05","excerpt":"로딩 시작과 끝을 보여주어야 함. role=\"alert\" aria-live=\"polite\"","frontmatter":{"categories":"접근성","title":"로딩 indicator 구현시 고려해야할 접근성","date":"March 31, 2022"},"fields":{"slug":"/a11y/loader/"}}},{"node":{"id":"b89b6ae3-31a1-55cf-ad3e-a3f1573272a5","excerpt":"모달 레이어에 role=\"dialog\" 속성 선언 레이어를 제외한 뒤에 보이는 영역(dimmed 된 영역) aria-hidden=\"true\" aria-hidden=\"true\"로 설정한 영역에 모달이 children으로 들어가서는 안됨. 다른 이유들도 있지만, dialog는 body 태그 밑으로 append 시키는 것이 좋은 이유중에 하나. 모달이 닫히고 초점이 어디로 이동해야 하는가? aria-labeledby 와 id 연결 aria-hidden 값이랑 open 값이랑 연결 참고 https://web.dev/hiding-and-updating-content/ aria-hidden=\"true\"로 설정한 영역에 모달이 children으로 들어가서는 안됨.","frontmatter":{"categories":"접근성","title":"모달 구현시 고려해야할 접근성","date":"March 30, 2022"},"fields":{"slug":"/a11y/modal/"}}},{"node":{"id":"33646ee5-1ede-5c2b-a7d9-23a02bf4c321","excerpt":"테스트코드를 잘짜는 것도 중요한데, 빠르게 많은 케이스를 다루는게 더 중요한것 같다. (2022.3.7 장애내고 느낀점;ㅋ) get vs find cy.get은 되지만, cy.find는 불가능.\ncy.get.find 이런식으로 체이닝 가능 within cy.get or cy.find로 좁힌 범위 내에서 무언가 실행할때 within이  유용하다. should, and then 사용하는 것보다 should와 and의 조합으로 여러가지 조건을 테스트하는것을 권장함.","frontmatter":{"categories":"test","title":"cypress 주요 api 모음","date":"March 03, 2022"},"fields":{"slug":"/test/cypress-api/"}}},{"node":{"id":"ab3916a6-3a92-5369-b426-953eb81ac6ce","excerpt":"IE에서 새창으로 열어 window 객체에 바인딩된 메서드 호출시, 호출후에 해당 메서드에서 사용했던 object 접근시, object permission denied 에러가 발생하는 이슈가 있다. 결론 = IE에서 새창으로 데이터 주고받아야 하는경우 postMessage를 사용해야 한다. 주의할 점 message 이벤트 리스너를 등록할때 꼭, 필요한 이벤트만 받을 수 있도록\nevent.origin을 체크하도록 한다.\nevent.data를 통해 trigger 된 데이터를 받을 수 있다. 이벤트를 송출할때, target에 '*'을 넣지 않도록 한다.\n왜냐하면 모든 창이 해당 메시지를 다 받을 수 있기 때문에 보안 이슈가있을 수 있다.","frontmatter":{"categories":"browser","title":"postmessage를 이용하여 window 간에 통신하기","date":"February 28, 2022"},"fields":{"slug":"/browser/post-message/"}}},{"node":{"id":"9ab05371-6917-55ab-99e3-f67e4cc1fc2c","excerpt":"","frontmatter":{"categories":"feature","title":"api 서비스 설계","date":"February 23, 2022"},"fields":{"slug":"/feature/api-service/"}}},{"node":{"id":"86b158df-f6a8-5534-bbd8-d0f03e33b4da","excerpt":"window.open 으로 새창 열었을때,  => scrollable, resizeable, tool 등등 조작가능, windowRef를 반환함.","frontmatter":{"categories":"browser","title":"PC용 브라우저(IE, Safari, Chrome, ...) 이슈 모음","date":"February 23, 2022"},"fields":{"slug":"/browser/pc-issues/"}}},{"node":{"id":"299a99b0-ddf6-57d2-b677-80e93451598f","excerpt":"IE 11을 대응하면서 겪었던 이슈들 input file 일때 e.target.value 값이 변경되면 onChange를 다시 탄다. text 일때 value 값이 변경되면 onInput 핸들러를 항상 탄다. Date 관련이슈들 Date 생성자 호출시 leadingZeror를 붙이지 않을 경우 Invalid Date 반환 new Date('2021-1') IE에서는 toLocaleDateString 사용시 tokenizer가 /임. (참고로 크롬은 .이다.) 해결방법은 toLocalDateString이 브라우저별로 이슈가 많으므로 getter를 사용한다. ScrollTo 동작 안함. synctax error 백화현상. element.scrollTop = 0 으로 조정해야 함 IE에서 window.open 시 반환하는 윈도우창에 global 변수 바인딩 안됨 IE에서 a tag target=“_blank”로 새창 열 경우 window.opener가 chorme은 null이고, IE는…","frontmatter":{"categories":"browser","title":"Internet Explorer 이슈 모음","date":"February 23, 2022"},"fields":{"slug":"/browser/ie-issues/"}}},{"node":{"id":"4c4c1d5d-db53-54a8-91fa-4b2d276f78af","excerpt":"제 블로그의 테마나 Gatsby의 다른 테마를 활용해서 Github Blog를 만들고 싶은 분들이 계실텐데요! 이런 분들에게 도움을 드리고자 이 글을 쓰게 되었습니다. 잘 안되는 부분이나 궁금한 점을 댓글로 남겨주면 확인해보고 답변 드리도록 하겠습니다! 1. Repository 생성하기 GitHub Blog를 만들려면 Github에 Repository를 생성해야 합니다.  GitHub에 로그인 한 뒤에 우측 상단에 있는 New Repository 버튼을 클릭하면 repository 생성 페이지로 이동하게 됩니다. 이 때 Import a repository 버튼을 클릭합니다.  아래 페이지에 도달하시면 두 가지 정보를 넣어주셔야 하는데, Your old repository’s clone URL에는 사용하고자 하는 gatsby 테마가 있는 repository의 주소를 넣어주시면 됩니다. 제 블로그 테마를 쓰고 싶으신 분들은 여기에 https://github.com/zoomKoding/…","frontmatter":{"categories":"블로그","title":"Gatsby 테마로 GitHub Blog 만들기","date":"July 06, 2021"},"fields":{"slug":"/gatsby-github-blog/"}}},{"node":{"id":"203cdfca-2a8d-5db5-9a81-ebef6b08fff3","excerpt":"👋 소개 블로그를 직접 운영하면서 조금씩 그려봤던 이상적인 개발 블로그 테마를 Gatsby를 통해 만들어보게 되었습니다. 이 테마가 블로그를 운영하고자 하시는 분들에게 자신의 이야기를 잘 담을 수 있는 공간이 되었으면 좋겠습니다.🙌 블로그 테마가 맘에 드셨다면 아래 과정을 통해 자신의 블로그를 만들어보시길 바랍니다! 혹시 만드시는 과정에서 궁금하신 점이나 어려움이 있으시다면 이슈를 통해 문의 남겨주세요! 스타는 블로그 테마를 지속적으로 발전시키는데 큰 힘이 됩니다!⭐️ 🚀 시작하기 Github Page나 Netlify 중 원하시는 배포 환경에 따라 다음 과정을 진행하시면 빠르게 블로그를 만드실 수 있습니다. 🦖 GitHub Page로 만들기 깃헙 페이지를 통해 블로그를 만드시다면 아래 글을 참고해주세요! Gatsby 테마로 GitHub Blog 만들기 🔧 Netlify로 만들기 아래 버튼을 활용하면 개인 계정에 zoomkoding-gatsby-blog를 사용하고 있는 Reposito…","frontmatter":{"categories":"블로그","title":"쉽고 빠르게 나만의 개츠비(Gatsby) 블로그 만들기","date":"March 22, 2021"},"fields":{"slug":"/gatsby-starter-zoomkoding-introduction/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"슈빈","bio":{"role":"개발자","description":["지속가능한 소프트웨어를 만드는","열정이 가득한","즐겁게 일하는"]},"social":{"github":"https://github.com/soobing","linkedIn":"https://www.linkedin.com/in/soobin-bak-8a1994117/","email":"qls0147@naver.com"}}}}},"pageContext":{}},
    "staticQueryHashes": ["1073350324","2938748437"]}